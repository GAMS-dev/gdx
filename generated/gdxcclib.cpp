/* C library code generated by API Generator 14c44c9 for gdx version 9
 *
 * GAMS - Loading mechanism for GAMS Expert-Level APIs
 *
 * Copyright (c) 2016-2023 GAMS Software GmbH <support@gams.com>
 * Copyright (c) 2016-2023 GAMS Development Corp. <support@gams.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <assert.h>

#include "cwrap.hpp"
#include "gclgms.h"

#if defined(_WIN32)
# define GDX_API extern "C" __declspec(dllexport)
# define GDX_CALLCONV __stdcall
#elif defined(__GNUC__)
# define GDX_API extern "C" __attribute__((__visibility__("default")))
# define GDX_CALLCONV
#else
# define GDX_API extern "C" 
# define GDX_CALLCONV
#endif

#ifndef APICHECKONLY

#define XCreate xcreate
#define XCreateD xcreated
#define D__XCreateD d__xcreated
#define XFree xfree
#define C__XAPIVersion c__xapiversion
#define D__XAPIVersion d__xapiversion
#define C__XCheck c__xcheck
#define D__XCheck d__xcheck
#define C__gdxSetLoadPath c__gdxsetloadpath
#define C__gdxGetLoadPath c__gdxgetloadpath
#define gdxXCreate gdxxcreate
#define gdxXCreateD gdxxcreated
#define D__gdxXCreateD d__gdxxcreated
#define gdxXFree gdxxfree
#define D__gdxXAPIVersion d__gdxxapiversion
#define D__gdxXCheck d__gdxxcheck
#define C__gdxAcronymAdd c__gdxacronymadd
#define C__gdxAcronymCount c__gdxacronymcount
#define C__gdxAcronymGetInfo c__gdxacronymgetinfo
#define C__gdxAcronymGetMapping c__gdxacronymgetmapping
#define C__gdxAcronymIndex c__gdxacronymindex
#define C__gdxAcronymName c__gdxacronymname
#define C__gdxAcronymNextNr c__gdxacronymnextnr
#define C__gdxAcronymSetInfo c__gdxacronymsetinfo
#define C__gdxAcronymValue c__gdxacronymvalue
#define C__gdxAddAlias c__gdxaddalias
#define C__gdxAddSetText c__gdxaddsettext
#define C__gdxAutoConvert c__gdxautoconvert
#define C__gdxClose c__gdxclose
#define C__gdxDataErrorCount c__gdxdataerrorcount
#define C__gdxDataErrorRecord c__gdxdataerrorrecord
#define C__gdxDataErrorRecordX c__gdxdataerrorrecordx
#define C__gdxDataReadDone c__gdxdatareaddone
#define C__gdxDataReadFilteredStart c__gdxdatareadfilteredstart
#define C__gdxDataReadMap c__gdxdatareadmap
#define C__gdxDataReadMapStart c__gdxdatareadmapstart
#define C__gdxDataReadRaw c__gdxdatareadraw
#define C__gdxDataReadRawFast c__gdxdatareadrawfast
#define C__gdxDataReadRawFastEx c__gdxdatareadrawfastex
#define C__gdxDataReadRawFastFilt c__gdxdatareadrawfastfilt
#define C__gdxDataReadRawStart c__gdxdatareadrawstart
#define C__gdxDataReadSlice c__gdxdatareadslice
#define C__gdxDataReadSliceStart c__gdxdatareadslicestart
#define C__gdxDataReadStr c__gdxdatareadstr
#define C__gdxDataReadStrStart c__gdxdatareadstrstart
#define C__gdxDataSliceUELS c__gdxdatasliceuels
#define C__gdxDataWriteDone c__gdxdatawritedone
#define C__gdxDataWriteMap c__gdxdatawritemap
#define C__gdxDataWriteMapStart c__gdxdatawritemapstart
#define C__gdxDataWriteRaw c__gdxdatawriteraw
#define C__gdxDataWriteRawStart c__gdxdatawriterawstart
#define C__gdxDataWriteStr c__gdxdatawritestr
#define C__gdxDataWriteStrStart c__gdxdatawritestrstart
#define C__gdxGetDLLVersion c__gdxgetdllversion
#define C__gdxErrorCount c__gdxerrorcount
#define C__gdxErrorStr c__gdxerrorstr
#define C__gdxFileInfo c__gdxfileinfo
#define C__gdxFileVersion c__gdxfileversion
#define C__gdxFilterExists c__gdxfilterexists
#define C__gdxFilterRegister c__gdxfilterregister
#define C__gdxFilterRegisterDone c__gdxfilterregisterdone
#define C__gdxFilterRegisterStart c__gdxfilterregisterstart
#define C__gdxFindSymbol c__gdxfindsymbol
#define C__gdxGetElemText c__gdxgetelemtext
#define C__gdxGetLastError c__gdxgetlasterror
#define C__gdxGetMemoryUsed c__gdxgetmemoryused
#define C__gdxGetSpecialValues c__gdxgetspecialvalues
#define C__gdxGetUEL c__gdxgetuel
#define C__gdxMapValue c__gdxmapvalue
#define C__gdxOpenAppend c__gdxopenappend
#define C__gdxOpenRead c__gdxopenread
#define C__gdxOpenReadEx c__gdxopenreadex
#define C__gdxOpenWrite c__gdxopenwrite
#define C__gdxOpenWriteEx c__gdxopenwriteex
#define C__gdxResetSpecialValues c__gdxresetspecialvalues
#define C__gdxSetHasText c__gdxsethastext
#define C__gdxSetReadSpecialValues c__gdxsetreadspecialvalues
#define C__gdxSetSpecialValues c__gdxsetspecialvalues
#define C__gdxSetTextNodeNr c__gdxsettextnodenr
#define C__gdxSetTraceLevel c__gdxsettracelevel
#define C__gdxSymbIndxMaxLength c__gdxsymbindxmaxlength
#define C__gdxSymbMaxLength c__gdxsymbmaxlength
#define C__gdxSymbolAddComment c__gdxsymboladdcomment
#define C__gdxSymbolGetComment c__gdxsymbolgetcomment
#define C__gdxSymbolGetDomain c__gdxsymbolgetdomain
#define C__gdxSymbolGetDomainX c__gdxsymbolgetdomainx
#define C__gdxSymbolDim c__gdxsymboldim
#define C__gdxSymbolInfo c__gdxsymbolinfo
#define C__gdxSymbolInfoX c__gdxsymbolinfox
#define C__gdxSymbolSetDomain c__gdxsymbolsetdomain
#define C__gdxSymbolSetDomainX c__gdxsymbolsetdomainx
#define C__gdxSystemInfo c__gdxsysteminfo
#define C__gdxUELMaxLength c__gdxuelmaxlength
#define C__gdxUELRegisterDone c__gdxuelregisterdone
#define C__gdxUELRegisterMap c__gdxuelregistermap
#define C__gdxUELRegisterMapStart c__gdxuelregistermapstart
#define C__gdxUELRegisterRaw c__gdxuelregisterraw
#define C__gdxUELRegisterRawStart c__gdxuelregisterrawstart
#define C__gdxUELRegisterStr c__gdxuelregisterstr
#define C__gdxUELRegisterStrStart c__gdxuelregisterstrstart
#define C__gdxUMFindUEL c__gdxumfinduel
#define C__gdxUMUelGet c__gdxumuelget
#define C__gdxUMUelInfo c__gdxumuelinfo
#define C__gdxGetDomainElements c__gdxgetdomainelements
#define C__gdxCurrentDim c__gdxcurrentdim
#define C__gdxRenameUEL c__gdxrenameuel
#define D__gdxAcronymAdd d__gdxacronymadd
#define D__gdxAcronymGetInfo d__gdxacronymgetinfo
#define D__gdxAcronymName d__gdxacronymname
#define D__gdxAcronymSetInfo d__gdxacronymsetinfo
#define D__gdxAddAlias d__gdxaddalias
#define D__gdxAddSetText d__gdxaddsettext
#define D__gdxDataReadRawFastFilt d__gdxdatareadrawfastfilt
#define D__gdxDataReadSlice d__gdxdatareadslice
#define D__gdxDataReadStr d__gdxdatareadstr
#define D__gdxDataSliceUELS d__gdxdatasliceuels
#define D__gdxDataWriteMapStart d__gdxdatawritemapstart
#define D__gdxDataWriteRawStart d__gdxdatawriterawstart
#define D__gdxDataWriteStr d__gdxdatawritestr
#define D__gdxDataWriteStrStart d__gdxdatawritestrstart
#define D__gdxGetDLLVersion d__gdxgetdllversion
#define D__gdxErrorStr d__gdxerrorstr
#define D__gdxFileVersion d__gdxfileversion
#define D__gdxFindSymbol d__gdxfindsymbol
#define D__gdxGetElemText d__gdxgetelemtext
#define D__gdxGetUEL d__gdxgetuel
#define D__gdxOpenAppend d__gdxopenappend
#define D__gdxOpenRead d__gdxopenread
#define D__gdxOpenReadEx d__gdxopenreadex
#define D__gdxOpenWrite d__gdxopenwrite
#define D__gdxOpenWriteEx d__gdxopenwriteex
#define D__gdxSetTraceLevel d__gdxsettracelevel
#define D__gdxSymbolAddComment d__gdxsymboladdcomment
#define D__gdxSymbolGetComment d__gdxsymbolgetcomment
#define D__gdxSymbolGetDomainX d__gdxsymbolgetdomainx
#define D__gdxSymbolInfo d__gdxsymbolinfo
#define D__gdxSymbolInfoX d__gdxsymbolinfox
#define D__gdxSymbolSetDomain d__gdxsymbolsetdomain
#define D__gdxSymbolSetDomainX d__gdxsymbolsetdomainx
#define D__gdxUELRegisterMap d__gdxuelregistermap
#define D__gdxUELRegisterRaw d__gdxuelregisterraw
#define D__gdxUELRegisterStr d__gdxuelregisterstr
#define D__gdxUMFindUEL d__gdxumfinduel
#define D__gdxUMUelGet d__gdxumuelget
#define D__gdxRenameUEL d__gdxrenameuel
#define N__gdxDataReadStr n__gdxdatareadstr
#define N__gdxDataSliceUELS n__gdxdatasliceuels
#define N__gdxSymbolGetDomainX n__gdxsymbolgetdomainx
#define F__gdxDataReadRawFast f__gdxdatareadrawfast
#define F__gdxDataReadRawFastEx f__gdxdatareadrawfastex
#define F__gdxDataReadRawFastFilt f__gdxdatareadrawfastfilt
#define F__gdxDataReadSlice f__gdxdatareadslice
#define F__gdxGetDomainElements f__gdxgetdomainelements
#define C__gdxStoreDomainSets c__gdxstoredomainsets
#define C__gdxStoreDomainSetsSet c__gdxstoredomainsetsset
#define C__gdxAllowBogusDomains c__gdxallowbogusdomains
#define C__gdxAllowBogusDomainsSet c__gdxallowbogusdomainsset


/* declarations shut up compiler warnings */
GDX_API void GDX_CALLCONV XCreate (TGXFileRec_t **TGXFile);
GDX_API void GDX_CALLCONV XCreate (TGXFileRec_t **TGXFile)
{
  char Msg_sst[256];
  gdxCreate(TGXFile, Msg_sst, sizeof(Msg_sst));
} /* XCreate */

GDX_API int GDX_CALLCONV gdxcreate (TGXFileRec_t **TGXFile, char *msgBuf, int msgBufLen);
GDX_API int GDX_CALLCONV gdxcreate (TGXFileRec_t **TGXFile, char *msgBuf, int msgBufLen)
{
  assert(NULL != TGXFile);
  *TGXFile = NULL;
  XCreate (TGXFile);
  if (NULL == *TGXFile) {
    strncpy (msgBuf, "Error while creating object", msgBufLen);
    if (msgBufLen > 0)
      msgBuf[msgBufLen-1] = '\0';
    return 0;
  }
  else {
    if (msgBufLen > 0)
      msgBuf[0] = '\0';
    return 1;
  }
} /* gdxcreate */

GDX_API void GDX_CALLCONV XCreateD (TGXFileRec_t **TGXFile, const char *dirName);
GDX_API void GDX_CALLCONV XCreateD (TGXFileRec_t **TGXFile, const char *dirName)
{
  char Msg_sst[256];
  gdxCreateD(TGXFile, dirName, Msg_sst, sizeof(Msg_sst));
} /* XCreateD */

GDX_API int GDX_CALLCONV gdxcreated (TGXFileRec_t **TGXFile, const char *dirName, char *msgBuf, int msgBufLen);
GDX_API int GDX_CALLCONV gdxcreated (TGXFileRec_t **TGXFile, const char *dirName, char *msgBuf, int msgBufLen)
{
  XCreateD (TGXFile, dirName);
  if (NULL == TGXFile) {
    strncpy (msgBuf, "Error while creating object", msgBufLen);
    if (msgBufLen > 0)
      msgBuf[msgBufLen-1] = '\0';
    return 0;
  }
  else {
    if (msgBufLen > 0)
      msgBuf[0] = '\0';
    return 1;
  }
} /* gdxCreated */

GDX_API void GDX_CALLCONV D__XCreateD (TGXFileRec_t **TGXFile, const char *dirName);
GDX_API void GDX_CALLCONV D__XCreateD (TGXFileRec_t **TGXFile, const char *dirName)
{
  char Msg_sst[256];
  char dirName_sst[256];
  strncpy(dirName_sst,(char *) dirName+1,(unsigned char)dirName[0]);
  dirName_sst[(unsigned char)dirName[0]] = '\0';
  gdxCreateD(TGXFile, dirName_sst, Msg_sst, sizeof(Msg_sst));
} /* D__XCreateD */

GDX_API int GDX_CALLCONV d__gdxcreated (TGXFileRec_t **TGXFile, const char *dirName, char *msgBuf, int msgBufLen);
GDX_API int GDX_CALLCONV d__gdxcreated (TGXFileRec_t **TGXFile, const char *dirName, char *msgBuf, int msgBufLen)
{
  char dirName_sst[256];
  strncpy(dirName_sst,(char *) dirName+1,(unsigned char)dirName[0]);
  dirName_sst[(unsigned char)dirName[0]] = '\0';
  XCreateD (TGXFile, dirName_sst);
  if (NULL == TGXFile) {
    strncpy (msgBuf, "Error while creating object", msgBufLen);
    if (msgBufLen > 0)
      msgBuf[msgBufLen-1] = '\0';
    return 0;
  }
  else {
    if (msgBufLen > 0)
      msgBuf[0] = '\0';
    return 1;
  }
} /* d__gdxCreated */

GDX_API void GDX_CALLCONV gdxXCreate (TGXFileRec_t **TGXFile);
GDX_API void GDX_CALLCONV gdxXCreate (TGXFileRec_t **TGXFile)
{
  XCreate(TGXFile);
} /* gdxXCreate */
GDX_API void GDX_CALLCONV gdxXCreateD (TGXFileRec_t **TGXFile, const char *dirName);
GDX_API void GDX_CALLCONV gdxXCreateD (TGXFileRec_t **TGXFile, const char *dirName)
{
  XCreateD(TGXFile, dirName);
} /* gdxXCreateD */

GDX_API void GDX_CALLCONV D__gdxXCreateD (TGXFileRec_t **TGXFile, const char *dirName);
GDX_API void GDX_CALLCONV D__gdxXCreateD (TGXFileRec_t **TGXFile, const char *dirName)
{
  char dirName_sst[256];
  strncpy(dirName_sst,(char *) dirName+1,(unsigned char)dirName[0]);
  dirName_sst[(unsigned char)dirName[0]] = '\0';
  XCreateD(TGXFile, dirName_sst);
} /* D__gdxXCreateD */

GDX_API void GDX_CALLCONV XFree (TGXFileRec_t **TGXFile);
GDX_API void GDX_CALLCONV XFree (TGXFileRec_t **TGXFile)
{
  if (*TGXFile != NULL)
  {
    gdxFree(TGXFile);
  }
} /* XFree */

GDX_API int GDX_CALLCONV gdxfree (TGXFileRec_t **TGXFile);
GDX_API int GDX_CALLCONV gdxfree (TGXFileRec_t **TGXFile)
{
  XFree (TGXFile);
  if (NULL == *TGXFile)
    return 1;
  else
    return 0;
} /* gdxfree */

GDX_API void GDX_CALLCONV gdxXFree (TGXFileRec_t **TGXFile);
GDX_API void GDX_CALLCONV gdxXFree (TGXFileRec_t **TGXFile)
{
  XFree(TGXFile);
} /* gdxXFree */

#endif

/* comp returns the compatibility mode:
   0: client is too old for the DLL, no compatibility
   1: client version and DLL version are the same, full compatibility
   2: client is older than DLL, but defined as compatible, backward compatibility
   3: client is newer than DLL, forward compatibility                              */
GDX_API int GDX_CALLCONV C__XAPIVersion(int api, char *Msg, int *comp);
GDX_API int GDX_CALLCONV C__XAPIVersion(int api, char *Msg, int *comp)
{
  *comp = 0;
  if (api >= 9) {
    if (api == 9) {
      *comp = 1;
      strcpy(Msg,"gdxcclib: Client version and DLL version are the same.");
    }
    else {
      *comp = 3;
      strcpy(Msg,"gdxcclib: Client version is newer than this DLL.");
    }
    return 1;
  }
  if ((api == 9) || (api == 8) || (api == 7)) {
    *comp = 2;
    strcpy(Msg,"gdxcclib: Client version is compatible to this version of the DLL.");
    return 1;
  }
  sprintf(Msg,"gdxcclib: The API is too old for the used library, API version: %d, library version: 9",api);
  return 0;
} /* C__XAPIVersion */

GDX_API int GDX_CALLCONV D__XAPIVersion(int api, char *Msg, int *comp);
GDX_API int GDX_CALLCONV D__XAPIVersion(int api, char *Msg, int *comp)
{
  int XAPIVersion_result;
  char Msg_sst[256];
  char *Msg_local;

  Msg_sst[0] = '\0';
  XAPIVersion_result = C__XAPIVersion(api,Msg_sst,comp);
  Msg_local = Msg+1;
  strncpy(Msg_local,Msg_sst,(strlen(Msg_sst)>255?255:strlen(Msg_sst)));
  Msg[0] = strlen(Msg_sst);
  return XAPIVersion_result;
} /* D__XAPIVersion */

GDX_API int GDX_CALLCONV D__gdxXAPIVersion(int api, char *Msg, int *comp);
GDX_API int GDX_CALLCONV D__gdxXAPIVersion(int api, char *Msg, int *comp)
{
  return D__XAPIVersion(api, Msg, comp);
} /* D__gdxXAPIVersion */

static int CheckSign(const char *funcn, int DLLNrArg, int ClNrArg, int DLLsign[], int Clsign[], char *Msg)
{
  int i;

  Msg[0] = '\0';
  if(DLLNrArg != ClNrArg)
  {
    sprintf(Msg,"gdxcclib: %s has wrong number of arguments.",funcn);
    return 0;
  }
  else
  {
    for(i=0;i<=DLLNrArg;i++)
    {
      if(DLLsign[i] != Clsign[i])
      {
        sprintf(Msg,"gdxcclib: %s has wrong argument types.",funcn);
        return 0;
      }
    }
  }
  return 1;
} /* CheckSign */

GDX_API int GDX_CALLCONV C__XCheck(const char *funcn, int ClNrArg, int Clsign[], char *Msg);
GDX_API int GDX_CALLCONV C__XCheck(const char *funcn, int ClNrArg, int Clsign[], char *Msg)
{
  int DLLsign[7];
  if(!strcmp(funcn,"gdxAcronymAdd"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 3;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymCount"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymGetInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;DLLsign[3] = 12;DLLsign[4] = 4;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymGetMapping"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 4;DLLsign[3] = 4;DLLsign[4] = 4;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymIndex"))
  {
    DLLsign[0] = 3;DLLsign[1] = 13;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymName"))
  {
    DLLsign[0] = 3;DLLsign[1] = 13;DLLsign[2] = 12;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymNextNr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymSetInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 11;DLLsign[3] = 11;DLLsign[4] = 3;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAcronymValue"))
  {
    DLLsign[0] = 13;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAddAlias"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAddSetText"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAutoConvert"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxClose"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataErrorCount"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataErrorRecord"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;DLLsign[3] = 54;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataErrorRecordX"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;DLLsign[3] = 54;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadDone"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadFilteredStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 51;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadMap"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;DLLsign[3] = 54;DLLsign[4] = 4;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadMapStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadRaw"))
  {
    DLLsign[0] = 3;DLLsign[1] = 52;DLLsign[2] = 54;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadRawFast"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 59;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadRawFastEx"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 59;DLLsign[3] = 4;DLLsign[4] = 1;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadRawFastFilt"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 55;DLLsign[3] = 59;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadRawStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadSlice"))
  {
    DLLsign[0] = 3;DLLsign[1] = 55;DLLsign[2] = 4;DLLsign[3] = 59;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadSliceStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadStr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 56;DLLsign[2] = 54;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataReadStrStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataSliceUELS"))
  {
    DLLsign[0] = 3;DLLsign[1] = 51;DLLsign[2] = 56;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteDone"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteMap"))
  {
    DLLsign[0] = 3;DLLsign[1] = 51;DLLsign[2] = 53;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteMapStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 3;DLLsign[4] = 3;DLLsign[5] = 3;
    return CheckSign(funcn,5,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteRaw"))
  {
    DLLsign[0] = 3;DLLsign[1] = 51;DLLsign[2] = 53;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteRawStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 3;DLLsign[4] = 3;DLLsign[5] = 3;
    return CheckSign(funcn,5,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteStr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 55;DLLsign[2] = 53;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxDataWriteStrStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 3;DLLsign[4] = 3;DLLsign[5] = 3;
    return CheckSign(funcn,5,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetDLLVersion"))
  {
    DLLsign[0] = 3;DLLsign[1] = 12;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxErrorCount"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxErrorStr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFileInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 4;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFileVersion"))
  {
    DLLsign[0] = 3;DLLsign[1] = 12;DLLsign[2] = 12;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFilterExists"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFilterRegister"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFilterRegisterDone"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFilterRegisterStart"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxFindSymbol"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetElemText"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetLastError"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetMemoryUsed"))
  {
    DLLsign[0] = 23;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetSpecialValues"))
  {
    DLLsign[0] = 3;DLLsign[1] = 58;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetUEL"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxMapValue"))
  {
    DLLsign[0] = 3;DLLsign[1] = 13;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxOpenAppend"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxOpenRead"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxOpenReadEx"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 3;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxOpenWrite"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxOpenWriteEx"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;DLLsign[3] = 3;DLLsign[4] = 4;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxResetSpecialValues"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSetHasText"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSetReadSpecialValues"))
  {
    DLLsign[0] = 3;DLLsign[1] = 57;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSetSpecialValues"))
  {
    DLLsign[0] = 3;DLLsign[1] = 57;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSetTextNodeNr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 3;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSetTraceLevel"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 11;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbIndxMaxLength"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbMaxLength"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolAddComment"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 11;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolGetComment"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 3;DLLsign[3] = 12;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolGetDomain"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 52;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolGetDomainX"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 56;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolDim"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;DLLsign[3] = 4;DLLsign[4] = 4;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolInfoX"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 4;DLLsign[3] = 4;DLLsign[4] = 12;
    return CheckSign(funcn,4,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolSetDomain"))
  {
    DLLsign[0] = 3;DLLsign[1] = 55;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSymbolSetDomainX"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 55;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxSystemInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 4;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELMaxLength"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterDone"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterMap"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 11;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterMapStart"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterRaw"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterRawStart"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterStr"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUELRegisterStrStart"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUMFindUEL"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 4;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUMUelGet"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 12;DLLsign[3] = 4;
    return CheckSign(funcn,3,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxUMUelInfo"))
  {
    DLLsign[0] = 3;DLLsign[1] = 4;DLLsign[2] = 4;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxGetDomainElements"))
  {
    DLLsign[0] = 3;DLLsign[1] = 3;DLLsign[2] = 3;DLLsign[3] = 3;DLLsign[4] = 59;DLLsign[5] = 4;DLLsign[6] = 1;
    return CheckSign(funcn,6,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxCurrentDim"))
  {
    DLLsign[0] = 3;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxRenameUEL"))
  {
    DLLsign[0] = 3;DLLsign[1] = 11;DLLsign[2] = 11;
    return CheckSign(funcn,2,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxStoreDomainSets"))
  {
    DLLsign[0] = 15;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxStoreDomainSetsSet"))
  {
    DLLsign[0] = 0; DLLsign[1] = 15;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAllowBogusDomains"))
  {
    DLLsign[0] = 15;
    return CheckSign(funcn,0,ClNrArg,DLLsign,Clsign,Msg);
  }
  else if(!strcmp(funcn,"gdxAllowBogusDomainsSet"))
  {
    DLLsign[0] = 0; DLLsign[1] = 15;
    return CheckSign(funcn,1,ClNrArg,DLLsign,Clsign,Msg);
  }
  else
  {
    sprintf(Msg,"gdxcclib: %s cannot be found in library.",funcn);
    return 0;
  }
} /* C__XCheck */

GDX_API int GDX_CALLCONV D__XCheck(const unsigned char *funcn, int ClNrArg, int Clsign[], char *Msg);
GDX_API int GDX_CALLCONV D__XCheck(const unsigned char *funcn, int ClNrArg, int Clsign[], char *Msg)
{
  int XCheck_result;
  char funcn_sst[256];
  char Msg_sst[256];
  char *Msg_local;

  strncpy(funcn_sst,(const char *)funcn+1,funcn[0]);
  funcn_sst[funcn[0]] = '\0';
  XCheck_result = C__XCheck(funcn_sst,ClNrArg,Clsign,Msg_sst);
  Msg_local = Msg+1;
  strncpy(Msg_local,Msg_sst,(strlen(Msg_sst)>255?255:strlen(Msg_sst)));
  Msg[0] = strlen(Msg_sst);
  return XCheck_result;
} /* D__XCheck */

GDX_API int GDX_CALLCONV D__gdxXCheck(const unsigned char *funcn, int ClNrArg, int Clsign[], char *Msg);
GDX_API int GDX_CALLCONV D__gdxXCheck(const unsigned char *funcn, int ClNrArg, int Clsign[], char *Msg)
{
  return D__XCheck(funcn, ClNrArg, Clsign, Msg);
} /* D__gdxXCheck */


GDX_API void GDX_CALLCONV C__gdxSetLoadPath(const char *s) {
   gdxSetLoadPath(s);
} /* C__gdxSetLoadPath */

GDX_API void GDX_CALLCONV C__gdxGetLoadPath(char *s) {
   gdxGetLoadPath(s);
} /* C__gdxGetLoadPath */

#ifndef APICHECKONLY

GDX_API int GDX_CALLCONV C__gdxAcronymAdd(TGXFileRec_t *TGXFile, const char *AName, const char *Txt, int AIndx);
GDX_API int GDX_CALLCONV C__gdxAcronymAdd(TGXFileRec_t *TGXFile, const char *AName, const char *Txt, int AIndx)
{
  return gdxAcronymAdd(TGXFile, AName, Txt, AIndx);
}

GDX_API int GDX_CALLCONV C__gdxAcronymCount(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxAcronymCount(TGXFileRec_t *TGXFile)
{
  return gdxAcronymCount(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxAcronymGetInfo(TGXFileRec_t *TGXFile, int N, char *AName, char *Txt, int *AIndx);
GDX_API int GDX_CALLCONV C__gdxAcronymGetInfo(TGXFileRec_t *TGXFile, int N, char *AName, char *Txt, int *AIndx)
{
  return gdxAcronymGetInfo(TGXFile, N, AName, Txt, AIndx);
}

GDX_API int GDX_CALLCONV C__gdxAcronymGetMapping(TGXFileRec_t *TGXFile, int N, int *orgIndx, int *newIndx, int *autoIndex);
GDX_API int GDX_CALLCONV C__gdxAcronymGetMapping(TGXFileRec_t *TGXFile, int N, int *orgIndx, int *newIndx, int *autoIndex)
{
  return gdxAcronymGetMapping(TGXFile, N, orgIndx, newIndx, autoIndex);
}

GDX_API int GDX_CALLCONV C__gdxAcronymIndex(TGXFileRec_t *TGXFile, double V);
GDX_API int GDX_CALLCONV C__gdxAcronymIndex(TGXFileRec_t *TGXFile, double V)
{
  return gdxAcronymIndex(TGXFile, V);
}

GDX_API int GDX_CALLCONV C__gdxAcronymName(TGXFileRec_t *TGXFile, double V, char *AName);
GDX_API int GDX_CALLCONV C__gdxAcronymName(TGXFileRec_t *TGXFile, double V, char *AName)
{
  return gdxAcronymName(TGXFile, V, AName);
}

GDX_API int GDX_CALLCONV C__gdxAcronymNextNr(TGXFileRec_t *TGXFile, int NV);
GDX_API int GDX_CALLCONV C__gdxAcronymNextNr(TGXFileRec_t *TGXFile, int NV)
{
  return gdxAcronymNextNr(TGXFile, NV);
}

GDX_API int GDX_CALLCONV C__gdxAcronymSetInfo(TGXFileRec_t *TGXFile, int N, const char *AName, const char *Txt, int AIndx);
GDX_API int GDX_CALLCONV C__gdxAcronymSetInfo(TGXFileRec_t *TGXFile, int N, const char *AName, const char *Txt, int AIndx)
{
  return gdxAcronymSetInfo(TGXFile, N, AName, Txt, AIndx);
}

GDX_API double GDX_CALLCONV C__gdxAcronymValue(TGXFileRec_t *TGXFile, int AIndx);
GDX_API double GDX_CALLCONV C__gdxAcronymValue(TGXFileRec_t *TGXFile, int AIndx)
{
  return gdxAcronymValue(TGXFile, AIndx);
}

GDX_API int GDX_CALLCONV C__gdxAddAlias(TGXFileRec_t *TGXFile, const char *Id1, const char *Id2);
GDX_API int GDX_CALLCONV C__gdxAddAlias(TGXFileRec_t *TGXFile, const char *Id1, const char *Id2)
{
  return gdxAddAlias(TGXFile, Id1, Id2);
}

GDX_API int GDX_CALLCONV C__gdxAddSetText(TGXFileRec_t *TGXFile, const char *Txt, int *TxtNr);
GDX_API int GDX_CALLCONV C__gdxAddSetText(TGXFileRec_t *TGXFile, const char *Txt, int *TxtNr)
{
  return gdxAddSetText(TGXFile, Txt, TxtNr);
}

GDX_API int GDX_CALLCONV C__gdxAutoConvert(TGXFileRec_t *TGXFile, int NV);
GDX_API int GDX_CALLCONV C__gdxAutoConvert(TGXFileRec_t *TGXFile, int NV)
{
  return gdxAutoConvert(TGXFile, NV);
}

GDX_API int GDX_CALLCONV C__gdxClose(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxClose(TGXFileRec_t *TGXFile)
{
  return gdxClose(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxDataErrorCount(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxDataErrorCount(TGXFileRec_t *TGXFile)
{
  return gdxDataErrorCount(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxDataErrorRecord(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[]);
GDX_API int GDX_CALLCONV C__gdxDataErrorRecord(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[])
{
  return gdxDataErrorRecord(TGXFile, RecNr, KeyInt, Values);
}

GDX_API int GDX_CALLCONV C__gdxDataErrorRecordX(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[]);
GDX_API int GDX_CALLCONV C__gdxDataErrorRecordX(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[])
{
  return gdxDataErrorRecordX(TGXFile, RecNr, KeyInt, Values);
}

GDX_API int GDX_CALLCONV C__gdxDataReadDone(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxDataReadDone(TGXFileRec_t *TGXFile)
{
  return gdxDataReadDone(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxDataReadFilteredStart(TGXFileRec_t *TGXFile, int SyNr, const int FilterAction[], int *NrRecs);
GDX_API int GDX_CALLCONV C__gdxDataReadFilteredStart(TGXFileRec_t *TGXFile, int SyNr, const int FilterAction[], int *NrRecs)
{
  return gdxDataReadFilteredStart(TGXFile, SyNr, FilterAction, NrRecs);
}

GDX_API int GDX_CALLCONV C__gdxDataReadMap(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[], int *DimFrst);
GDX_API int GDX_CALLCONV C__gdxDataReadMap(TGXFileRec_t *TGXFile, int RecNr, int KeyInt[], double Values[], int *DimFrst)
{
  return gdxDataReadMap(TGXFile, RecNr, KeyInt, Values, DimFrst);
}

GDX_API int GDX_CALLCONV C__gdxDataReadMapStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs);
GDX_API int GDX_CALLCONV C__gdxDataReadMapStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs)
{
  return gdxDataReadMapStart(TGXFile, SyNr, NrRecs);
}

GDX_API int GDX_CALLCONV C__gdxDataReadRaw(TGXFileRec_t *TGXFile, int KeyInt[], double Values[], int *DimFrst);
GDX_API int GDX_CALLCONV C__gdxDataReadRaw(TGXFileRec_t *TGXFile, int KeyInt[], double Values[], int *DimFrst)
{
  return gdxDataReadRaw(TGXFile, KeyInt, Values, DimFrst);
}

GDX_API int GDX_CALLCONV C__gdxDataReadRawFast(TGXFileRec_t *TGXFile, int SyNr, TDataStoreProc_t DP, int *NrRecs);
GDX_API int GDX_CALLCONV C__gdxDataReadRawFast(TGXFileRec_t *TGXFile, int SyNr, TDataStoreProc_t DP, int *NrRecs)
{setCallByRef(TGXFile, "gdxDataReadRawFast_DP", 0);
  return gdxDataReadRawFast(TGXFile, SyNr, DP, NrRecs);
}

GDX_API int GDX_CALLCONV C__gdxDataReadRawFastEx(TGXFileRec_t *TGXFile, int SyNr, TDataStoreExProc_t DP, int *NrRecs, void *Uptr);
GDX_API int GDX_CALLCONV C__gdxDataReadRawFastEx(TGXFileRec_t *TGXFile, int SyNr, TDataStoreExProc_t DP, int *NrRecs, void *Uptr)
{setCallByRef(TGXFile, "gdxDataReadRawFastEx_DP", 0);
  return gdxDataReadRawFastEx(TGXFile, SyNr, DP, NrRecs, Uptr);
}

GDX_API int GDX_CALLCONV C__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr[], TDataStoreFiltProc_t DP);
GDX_API int GDX_CALLCONV C__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr[], TDataStoreFiltProc_t DP)
{setCallByRef(TGXFile, "gdxDataReadRawFastFilt_DP", 0);
  return gdxDataReadRawFastFilt(TGXFile, SyNr, UelFilterStr, DP);
}

GDX_API int GDX_CALLCONV C__gdxDataReadRawStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs);
GDX_API int GDX_CALLCONV C__gdxDataReadRawStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs)
{
  return gdxDataReadRawStart(TGXFile, SyNr, NrRecs);
}

GDX_API int GDX_CALLCONV C__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr[], int *Dimen, TDataStoreProc_t DP);
GDX_API int GDX_CALLCONV C__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr[], int *Dimen, TDataStoreProc_t DP)
{setCallByRef(TGXFile, "gdxDataReadSlice_DP", 0);
  return gdxDataReadSlice(TGXFile, UelFilterStr, Dimen, DP);
}

GDX_API int GDX_CALLCONV C__gdxDataReadSliceStart(TGXFileRec_t *TGXFile, int SyNr, int ElemCounts[]);
GDX_API int GDX_CALLCONV C__gdxDataReadSliceStart(TGXFileRec_t *TGXFile, int SyNr, int ElemCounts[])
{
  return gdxDataReadSliceStart(TGXFile, SyNr, ElemCounts);
}

GDX_API int GDX_CALLCONV C__gdxDataReadStr(TGXFileRec_t *TGXFile, char *KeyStr[], double Values[], int *DimFrst);
GDX_API int GDX_CALLCONV C__gdxDataReadStr(TGXFileRec_t *TGXFile, char *KeyStr[], double Values[], int *DimFrst)
{
  return gdxDataReadStr(TGXFile, KeyStr, Values, DimFrst);
}

GDX_API int GDX_CALLCONV C__gdxDataReadStrStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs);
GDX_API int GDX_CALLCONV C__gdxDataReadStrStart(TGXFileRec_t *TGXFile, int SyNr, int *NrRecs)
{
  return gdxDataReadStrStart(TGXFile, SyNr, NrRecs);
}

GDX_API int GDX_CALLCONV C__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const int SliceKeyInt[], char *KeyStr[]);
GDX_API int GDX_CALLCONV C__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const int SliceKeyInt[], char *KeyStr[])
{
  return gdxDataSliceUELS(TGXFile, SliceKeyInt, KeyStr);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteDone(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxDataWriteDone(TGXFileRec_t *TGXFile)
{
  return gdxDataWriteDone(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteMap(TGXFileRec_t *TGXFile, const int KeyInt[], const double Values[]);
GDX_API int GDX_CALLCONV C__gdxDataWriteMap(TGXFileRec_t *TGXFile, const int KeyInt[], const double Values[])
{
  return gdxDataWriteMap(TGXFile, KeyInt, Values);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteMapStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV C__gdxDataWriteMapStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  return gdxDataWriteMapStart(TGXFile, SyId, ExplTxt, Dimen, Typ, UserInfo);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteRaw(TGXFileRec_t *TGXFile, const int KeyInt[], const double Values[]);
GDX_API int GDX_CALLCONV C__gdxDataWriteRaw(TGXFileRec_t *TGXFile, const int KeyInt[], const double Values[])
{
  return gdxDataWriteRaw(TGXFile, KeyInt, Values);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteRawStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV C__gdxDataWriteRawStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  return gdxDataWriteRawStart(TGXFile, SyId, ExplTxt, Dimen, Typ, UserInfo);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteStr(TGXFileRec_t *TGXFile, const char *KeyStr[], const double Values[]);
GDX_API int GDX_CALLCONV C__gdxDataWriteStr(TGXFileRec_t *TGXFile, const char *KeyStr[], const double Values[])
{
  return gdxDataWriteStr(TGXFile, KeyStr, Values);
}

GDX_API int GDX_CALLCONV C__gdxDataWriteStrStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV C__gdxDataWriteStrStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  return gdxDataWriteStrStart(TGXFile, SyId, ExplTxt, Dimen, Typ, UserInfo);
}

GDX_API int GDX_CALLCONV C__gdxGetDLLVersion(TGXFileRec_t *TGXFile, char *V);
GDX_API int GDX_CALLCONV C__gdxGetDLLVersion(TGXFileRec_t *TGXFile, char *V)
{
  return gdxGetDLLVersion(TGXFile, V);
}

GDX_API int GDX_CALLCONV C__gdxErrorCount(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxErrorCount(TGXFileRec_t *TGXFile)
{
  return gdxErrorCount(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxErrorStr(TGXFileRec_t *TGXFile, int ErrNr, char *ErrMsg);
GDX_API int GDX_CALLCONV C__gdxErrorStr(TGXFileRec_t *TGXFile, int ErrNr, char *ErrMsg)
{
  return gdxErrorStr(TGXFile, ErrNr, ErrMsg);
}

GDX_API int GDX_CALLCONV C__gdxFileInfo(TGXFileRec_t *TGXFile, int *FileVer, int *ComprLev);
GDX_API int GDX_CALLCONV C__gdxFileInfo(TGXFileRec_t *TGXFile, int *FileVer, int *ComprLev)
{
  return gdxFileInfo(TGXFile, FileVer, ComprLev);
}

GDX_API int GDX_CALLCONV C__gdxFileVersion(TGXFileRec_t *TGXFile, char *FileStr, char *ProduceStr);
GDX_API int GDX_CALLCONV C__gdxFileVersion(TGXFileRec_t *TGXFile, char *FileStr, char *ProduceStr)
{
  return gdxFileVersion(TGXFile, FileStr, ProduceStr);
}

GDX_API int GDX_CALLCONV C__gdxFilterExists(TGXFileRec_t *TGXFile, int FilterNr);
GDX_API int GDX_CALLCONV C__gdxFilterExists(TGXFileRec_t *TGXFile, int FilterNr)
{
  return gdxFilterExists(TGXFile, FilterNr);
}

GDX_API int GDX_CALLCONV C__gdxFilterRegister(TGXFileRec_t *TGXFile, int UelMap);
GDX_API int GDX_CALLCONV C__gdxFilterRegister(TGXFileRec_t *TGXFile, int UelMap)
{
  return gdxFilterRegister(TGXFile, UelMap);
}

GDX_API int GDX_CALLCONV C__gdxFilterRegisterDone(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxFilterRegisterDone(TGXFileRec_t *TGXFile)
{
  return gdxFilterRegisterDone(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxFilterRegisterStart(TGXFileRec_t *TGXFile, int FilterNr);
GDX_API int GDX_CALLCONV C__gdxFilterRegisterStart(TGXFileRec_t *TGXFile, int FilterNr)
{
  return gdxFilterRegisterStart(TGXFile, FilterNr);
}

GDX_API int GDX_CALLCONV C__gdxFindSymbol(TGXFileRec_t *TGXFile, const char *SyId, int *SyNr);
GDX_API int GDX_CALLCONV C__gdxFindSymbol(TGXFileRec_t *TGXFile, const char *SyId, int *SyNr)
{
  return gdxFindSymbol(TGXFile, SyId, SyNr);
}

GDX_API int GDX_CALLCONV C__gdxGetElemText(TGXFileRec_t *TGXFile, int TxtNr, char *Txt, int *Node);
GDX_API int GDX_CALLCONV C__gdxGetElemText(TGXFileRec_t *TGXFile, int TxtNr, char *Txt, int *Node)
{
  return gdxGetElemText(TGXFile, TxtNr, Txt, Node);
}

GDX_API int GDX_CALLCONV C__gdxGetLastError(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxGetLastError(TGXFileRec_t *TGXFile)
{
  return gdxGetLastError(TGXFile);
}

GDX_API INT64 GDX_CALLCONV C__gdxGetMemoryUsed(TGXFileRec_t *TGXFile);
GDX_API INT64 GDX_CALLCONV C__gdxGetMemoryUsed(TGXFileRec_t *TGXFile)
{
  return gdxGetMemoryUsed(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxGetSpecialValues(TGXFileRec_t *TGXFile, double AVals[]);
GDX_API int GDX_CALLCONV C__gdxGetSpecialValues(TGXFileRec_t *TGXFile, double AVals[])
{
  return gdxGetSpecialValues(TGXFile, AVals);
}

GDX_API int GDX_CALLCONV C__gdxGetUEL(TGXFileRec_t *TGXFile, int UelNr, char *Uel);
GDX_API int GDX_CALLCONV C__gdxGetUEL(TGXFileRec_t *TGXFile, int UelNr, char *Uel)
{
  return gdxGetUEL(TGXFile, UelNr, Uel);
}

GDX_API int GDX_CALLCONV C__gdxMapValue(TGXFileRec_t *TGXFile, double D, int *sv);
GDX_API int GDX_CALLCONV C__gdxMapValue(TGXFileRec_t *TGXFile, double D, int *sv)
{
  return gdxMapValue(TGXFile, D, sv);
}

GDX_API int GDX_CALLCONV C__gdxOpenAppend(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr);
GDX_API int GDX_CALLCONV C__gdxOpenAppend(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr)
{
  return gdxOpenAppend(TGXFile, FileName, Producer, ErrNr);
}

GDX_API int GDX_CALLCONV C__gdxOpenRead(TGXFileRec_t *TGXFile, const char *FileName, int *ErrNr);
GDX_API int GDX_CALLCONV C__gdxOpenRead(TGXFileRec_t *TGXFile, const char *FileName, int *ErrNr)
{
  return gdxOpenRead(TGXFile, FileName, ErrNr);
}

GDX_API int GDX_CALLCONV C__gdxOpenReadEx(TGXFileRec_t *TGXFile, const char *FileName, int ReadMode, int *ErrNr);
GDX_API int GDX_CALLCONV C__gdxOpenReadEx(TGXFileRec_t *TGXFile, const char *FileName, int ReadMode, int *ErrNr)
{
  return gdxOpenReadEx(TGXFile, FileName, ReadMode, ErrNr);
}

GDX_API int GDX_CALLCONV C__gdxOpenWrite(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr);
GDX_API int GDX_CALLCONV C__gdxOpenWrite(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr)
{
  return gdxOpenWrite(TGXFile, FileName, Producer, ErrNr);
}

GDX_API int GDX_CALLCONV C__gdxOpenWriteEx(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int Compr, int *ErrNr);
GDX_API int GDX_CALLCONV C__gdxOpenWriteEx(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int Compr, int *ErrNr)
{
  return gdxOpenWriteEx(TGXFile, FileName, Producer, Compr, ErrNr);
}

GDX_API int GDX_CALLCONV C__gdxResetSpecialValues(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxResetSpecialValues(TGXFileRec_t *TGXFile)
{
  return gdxResetSpecialValues(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxSetHasText(TGXFileRec_t *TGXFile, int SyNr);
GDX_API int GDX_CALLCONV C__gdxSetHasText(TGXFileRec_t *TGXFile, int SyNr)
{
  return gdxSetHasText(TGXFile, SyNr);
}

GDX_API int GDX_CALLCONV C__gdxSetReadSpecialValues(TGXFileRec_t *TGXFile, const double AVals[]);
GDX_API int GDX_CALLCONV C__gdxSetReadSpecialValues(TGXFileRec_t *TGXFile, const double AVals[])
{
  return gdxSetReadSpecialValues(TGXFile, AVals);
}

GDX_API int GDX_CALLCONV C__gdxSetSpecialValues(TGXFileRec_t *TGXFile, const double AVals[]);
GDX_API int GDX_CALLCONV C__gdxSetSpecialValues(TGXFileRec_t *TGXFile, const double AVals[])
{
  return gdxSetSpecialValues(TGXFile, AVals);
}

GDX_API int GDX_CALLCONV C__gdxSetTextNodeNr(TGXFileRec_t *TGXFile, int TxtNr, int Node);
GDX_API int GDX_CALLCONV C__gdxSetTextNodeNr(TGXFileRec_t *TGXFile, int TxtNr, int Node)
{
  return gdxSetTextNodeNr(TGXFile, TxtNr, Node);
}

GDX_API int GDX_CALLCONV C__gdxSetTraceLevel(TGXFileRec_t *TGXFile, int N, const char *s);
GDX_API int GDX_CALLCONV C__gdxSetTraceLevel(TGXFileRec_t *TGXFile, int N, const char *s)
{
  return gdxSetTraceLevel(TGXFile, N, s);
}

GDX_API int GDX_CALLCONV C__gdxSymbIndxMaxLength(TGXFileRec_t *TGXFile, int SyNr, int LengthInfo[]);
GDX_API int GDX_CALLCONV C__gdxSymbIndxMaxLength(TGXFileRec_t *TGXFile, int SyNr, int LengthInfo[])
{
  return gdxSymbIndxMaxLength(TGXFile, SyNr, LengthInfo);
}

GDX_API int GDX_CALLCONV C__gdxSymbMaxLength(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxSymbMaxLength(TGXFileRec_t *TGXFile)
{
  return gdxSymbMaxLength(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxSymbolAddComment(TGXFileRec_t *TGXFile, int SyNr, const char *Txt);
GDX_API int GDX_CALLCONV C__gdxSymbolAddComment(TGXFileRec_t *TGXFile, int SyNr, const char *Txt)
{
  return gdxSymbolAddComment(TGXFile, SyNr, Txt);
}

GDX_API int GDX_CALLCONV C__gdxSymbolGetComment(TGXFileRec_t *TGXFile, int SyNr, int N, char *Txt);
GDX_API int GDX_CALLCONV C__gdxSymbolGetComment(TGXFileRec_t *TGXFile, int SyNr, int N, char *Txt)
{
  return gdxSymbolGetComment(TGXFile, SyNr, N, Txt);
}

GDX_API int GDX_CALLCONV C__gdxSymbolGetDomain(TGXFileRec_t *TGXFile, int SyNr, int DomainSyNrs[]);
GDX_API int GDX_CALLCONV C__gdxSymbolGetDomain(TGXFileRec_t *TGXFile, int SyNr, int DomainSyNrs[])
{
  return gdxSymbolGetDomain(TGXFile, SyNr, DomainSyNrs);
}

GDX_API int GDX_CALLCONV C__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile, int SyNr, char *DomainIDs[]);
GDX_API int GDX_CALLCONV C__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile, int SyNr, char *DomainIDs[])
{
  return gdxSymbolGetDomainX(TGXFile, SyNr, DomainIDs);
}

GDX_API int GDX_CALLCONV C__gdxSymbolDim(TGXFileRec_t *TGXFile, int SyNr);
GDX_API int GDX_CALLCONV C__gdxSymbolDim(TGXFileRec_t *TGXFile, int SyNr)
{
  return gdxSymbolDim(TGXFile, SyNr);
}

GDX_API int GDX_CALLCONV C__gdxSymbolInfo(TGXFileRec_t *TGXFile, int SyNr, char *SyId, int *Dimen, int *Typ);
GDX_API int GDX_CALLCONV C__gdxSymbolInfo(TGXFileRec_t *TGXFile, int SyNr, char *SyId, int *Dimen, int *Typ)
{
  return gdxSymbolInfo(TGXFile, SyNr, SyId, Dimen, Typ);
}

GDX_API int GDX_CALLCONV C__gdxSymbolInfoX(TGXFileRec_t *TGXFile, int SyNr, int *RecCnt, int *UserInfo, char *ExplTxt);
GDX_API int GDX_CALLCONV C__gdxSymbolInfoX(TGXFileRec_t *TGXFile, int SyNr, int *RecCnt, int *UserInfo, char *ExplTxt)
{
  return gdxSymbolInfoX(TGXFile, SyNr, RecCnt, UserInfo, ExplTxt);
}

GDX_API int GDX_CALLCONV C__gdxSymbolSetDomain(TGXFileRec_t *TGXFile, const char *DomainIDs[]);
GDX_API int GDX_CALLCONV C__gdxSymbolSetDomain(TGXFileRec_t *TGXFile, const char *DomainIDs[])
{
  return gdxSymbolSetDomain(TGXFile, DomainIDs);
}

GDX_API int GDX_CALLCONV C__gdxSymbolSetDomainX(TGXFileRec_t *TGXFile, int SyNr, const char *DomainIDs[]);
GDX_API int GDX_CALLCONV C__gdxSymbolSetDomainX(TGXFileRec_t *TGXFile, int SyNr, const char *DomainIDs[])
{
  return gdxSymbolSetDomainX(TGXFile, SyNr, DomainIDs);
}

GDX_API int GDX_CALLCONV C__gdxSystemInfo(TGXFileRec_t *TGXFile, int *SyCnt, int *UelCnt);
GDX_API int GDX_CALLCONV C__gdxSystemInfo(TGXFileRec_t *TGXFile, int *SyCnt, int *UelCnt)
{
  return gdxSystemInfo(TGXFile, SyCnt, UelCnt);
}

GDX_API int GDX_CALLCONV C__gdxUELMaxLength(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxUELMaxLength(TGXFileRec_t *TGXFile)
{
  return gdxUELMaxLength(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterDone(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxUELRegisterDone(TGXFileRec_t *TGXFile)
{
  return gdxUELRegisterDone(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterMap(TGXFileRec_t *TGXFile, int UMap, const char *Uel);
GDX_API int GDX_CALLCONV C__gdxUELRegisterMap(TGXFileRec_t *TGXFile, int UMap, const char *Uel)
{
  return gdxUELRegisterMap(TGXFile, UMap, Uel);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterMapStart(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxUELRegisterMapStart(TGXFileRec_t *TGXFile)
{
  return gdxUELRegisterMapStart(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterRaw(TGXFileRec_t *TGXFile, const char *Uel);
GDX_API int GDX_CALLCONV C__gdxUELRegisterRaw(TGXFileRec_t *TGXFile, const char *Uel)
{
  return gdxUELRegisterRaw(TGXFile, Uel);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterRawStart(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxUELRegisterRawStart(TGXFileRec_t *TGXFile)
{
  return gdxUELRegisterRawStart(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterStr(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr);
GDX_API int GDX_CALLCONV C__gdxUELRegisterStr(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr)
{
  return gdxUELRegisterStr(TGXFile, Uel, UelNr);
}

GDX_API int GDX_CALLCONV C__gdxUELRegisterStrStart(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxUELRegisterStrStart(TGXFileRec_t *TGXFile)
{
  return gdxUELRegisterStrStart(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxUMFindUEL(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr, int *UelMap);
GDX_API int GDX_CALLCONV C__gdxUMFindUEL(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr, int *UelMap)
{
  return gdxUMFindUEL(TGXFile, Uel, UelNr, UelMap);
}

GDX_API int GDX_CALLCONV C__gdxUMUelGet(TGXFileRec_t *TGXFile, int UelNr, char *Uel, int *UelMap);
GDX_API int GDX_CALLCONV C__gdxUMUelGet(TGXFileRec_t *TGXFile, int UelNr, char *Uel, int *UelMap)
{
  return gdxUMUelGet(TGXFile, UelNr, Uel, UelMap);
}

GDX_API int GDX_CALLCONV C__gdxUMUelInfo(TGXFileRec_t *TGXFile, int *UelCnt, int *HighMap);
GDX_API int GDX_CALLCONV C__gdxUMUelInfo(TGXFileRec_t *TGXFile, int *UelCnt, int *HighMap)
{
  return gdxUMUelInfo(TGXFile, UelCnt, HighMap);
}

GDX_API int GDX_CALLCONV C__gdxGetDomainElements(TGXFileRec_t *TGXFile, int SyNr, int DimPos, int FilterNr, TDomainIndexProc_t DP, int *NrElem, void *Uptr);
GDX_API int GDX_CALLCONV C__gdxGetDomainElements(TGXFileRec_t *TGXFile, int SyNr, int DimPos, int FilterNr, TDomainIndexProc_t DP, int *NrElem, void *Uptr)
{setCallByRef(TGXFile, "gdxGetDomainElements_DP", 0);
  return gdxGetDomainElements(TGXFile, SyNr, DimPos, FilterNr, DP, NrElem, Uptr);
}

GDX_API int GDX_CALLCONV C__gdxCurrentDim(TGXFileRec_t *TGXFile);
GDX_API int GDX_CALLCONV C__gdxCurrentDim(TGXFileRec_t *TGXFile)
{
  return gdxCurrentDim(TGXFile);
}

GDX_API int GDX_CALLCONV C__gdxRenameUEL(TGXFileRec_t *TGXFile, const char *OldName, const char *NewName);
GDX_API int GDX_CALLCONV C__gdxRenameUEL(TGXFileRec_t *TGXFile, const char *OldName, const char *NewName)
{
  return gdxRenameUEL(TGXFile, OldName, NewName);
}

GDX_API int GDX_CALLCONV D__gdxAcronymAdd(TGXFileRec_t *TGXFile, const char *AName, const char *Txt, int AIndx);
GDX_API int GDX_CALLCONV D__gdxAcronymAdd(TGXFileRec_t *TGXFile, const char *AName, const char *Txt, int AIndx)
{
  int  gdxAcronymAdd_result;
  char AName_sst[256];
  char Txt_sst[256];
  strncpy(AName_sst,(char *) AName + 1,(unsigned char) AName[0]);
  AName_sst[(unsigned char) AName[0]] = '\0';
  strncpy(Txt_sst,(char *) Txt + 1,(unsigned char) Txt[0]);
  Txt_sst[(unsigned char) Txt[0]] = '\0';
  gdxAcronymAdd_result = gdxAcronymAdd(TGXFile, AName_sst, Txt_sst, AIndx);
  return gdxAcronymAdd_result;
}

GDX_API int GDX_CALLCONV D__gdxAcronymGetInfo(TGXFileRec_t *TGXFile, int N, char *AName, char *Txt, int *AIndx);
GDX_API int GDX_CALLCONV D__gdxAcronymGetInfo(TGXFileRec_t *TGXFile, int N, char *AName, char *Txt, int *AIndx)
{
  int  gdxAcronymGetInfo_result;
  char AName_sst[256];
  char *AName_local;
  char Txt_sst[256];
  char *Txt_local;
  gdxAcronymGetInfo_result = gdxAcronymGetInfo(TGXFile, N, AName_sst, Txt_sst, AIndx);
  AName_local = AName+1;
  strncpy(AName_local,AName_sst,(strlen(AName_sst)>255?255:strlen(AName_sst)));
  AName[0] = strlen(AName_sst);
  Txt_local = Txt+1;
  strncpy(Txt_local,Txt_sst,(strlen(Txt_sst)>255?255:strlen(Txt_sst)));
  Txt[0] = strlen(Txt_sst);
  return gdxAcronymGetInfo_result;
}

GDX_API int GDX_CALLCONV D__gdxAcronymName(TGXFileRec_t *TGXFile, double V, char *AName);
GDX_API int GDX_CALLCONV D__gdxAcronymName(TGXFileRec_t *TGXFile, double V, char *AName)
{
  int  gdxAcronymName_result;
  char AName_sst[256];
  char *AName_local;
  gdxAcronymName_result = gdxAcronymName(TGXFile, V, AName_sst);
  AName_local = AName+1;
  strncpy(AName_local,AName_sst,(strlen(AName_sst)>255?255:strlen(AName_sst)));
  AName[0] = strlen(AName_sst);
  return gdxAcronymName_result;
}

GDX_API int GDX_CALLCONV D__gdxAcronymSetInfo(TGXFileRec_t *TGXFile, int N, const char *AName, const char *Txt, int AIndx);
GDX_API int GDX_CALLCONV D__gdxAcronymSetInfo(TGXFileRec_t *TGXFile, int N, const char *AName, const char *Txt, int AIndx)
{
  int  gdxAcronymSetInfo_result;
  char AName_sst[256];
  char Txt_sst[256];
  strncpy(AName_sst,(char *) AName + 1,(unsigned char) AName[0]);
  AName_sst[(unsigned char) AName[0]] = '\0';
  strncpy(Txt_sst,(char *) Txt + 1,(unsigned char) Txt[0]);
  Txt_sst[(unsigned char) Txt[0]] = '\0';
  gdxAcronymSetInfo_result = gdxAcronymSetInfo(TGXFile, N, AName_sst, Txt_sst, AIndx);
  return gdxAcronymSetInfo_result;
}

GDX_API int GDX_CALLCONV D__gdxAddAlias(TGXFileRec_t *TGXFile, const char *Id1, const char *Id2);
GDX_API int GDX_CALLCONV D__gdxAddAlias(TGXFileRec_t *TGXFile, const char *Id1, const char *Id2)
{
  int  gdxAddAlias_result;
  char Id1_sst[256];
  char Id2_sst[256];
  strncpy(Id1_sst,(char *) Id1 + 1,(unsigned char) Id1[0]);
  Id1_sst[(unsigned char) Id1[0]] = '\0';
  strncpy(Id2_sst,(char *) Id2 + 1,(unsigned char) Id2[0]);
  Id2_sst[(unsigned char) Id2[0]] = '\0';
  gdxAddAlias_result = gdxAddAlias(TGXFile, Id1_sst, Id2_sst);
  return gdxAddAlias_result;
}

GDX_API int GDX_CALLCONV D__gdxAddSetText(TGXFileRec_t *TGXFile, const char *Txt, int *TxtNr);
GDX_API int GDX_CALLCONV D__gdxAddSetText(TGXFileRec_t *TGXFile, const char *Txt, int *TxtNr)
{
  int  gdxAddSetText_result;
  char Txt_sst[256];
  strncpy(Txt_sst,(char *) Txt + 1,(unsigned char) Txt[0]);
  Txt_sst[(unsigned char) Txt[0]] = '\0';
  gdxAddSetText_result = gdxAddSetText(TGXFile, Txt_sst, TxtNr);
  return gdxAddSetText_result;
}

GDX_API int GDX_CALLCONV D__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr, TDataStoreFiltProc_t DP);
GDX_API int GDX_CALLCONV D__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr, TDataStoreFiltProc_t DP)
{setCallByRef(TGXFile, "gdxDataReadRawFastFilt_DP", 0);
  int  gdxDataReadRawFastFilt_result;
  int UelFilterStr_cnt;
  int UelFilterStr_sidim;
  gdxStrIndex_t UelFilterStr_dim;
  gdxStrIndexPtrs_t UelFilterStr_pdim;
  GDXSTRINDEXPTRS_INIT(UelFilterStr_dim,UelFilterStr_pdim); /* assign pdim */
  UelFilterStr_sidim = gdxSymbolDim(TGXFile, SyNr);
  for(UelFilterStr_cnt=0;UelFilterStr_cnt<UelFilterStr_sidim;UelFilterStr_cnt++)
  {
    strncpy(UelFilterStr_pdim[UelFilterStr_cnt],(char *) UelFilterStr + UelFilterStr_cnt*256 + 1,(unsigned char) UelFilterStr[UelFilterStr_cnt*256]);
    UelFilterStr_dim[UelFilterStr_cnt][(unsigned char) UelFilterStr[UelFilterStr_cnt*256]] = '\0';
  }
  gdxDataReadRawFastFilt_result = gdxDataReadRawFastFilt(TGXFile, SyNr, (const char **) UelFilterStr_pdim, DP);
  return gdxDataReadRawFastFilt_result;
}

GDX_API int GDX_CALLCONV D__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr, int *Dimen, TDataStoreProc_t DP);
GDX_API int GDX_CALLCONV D__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr, int *Dimen, TDataStoreProc_t DP)
{setCallByRef(TGXFile, "gdxDataReadSlice_DP", 0);
  int  gdxDataReadSlice_result;
  int UelFilterStr_cnt;
  int UelFilterStr_sidim;
  gdxStrIndex_t UelFilterStr_dim;
  gdxStrIndexPtrs_t UelFilterStr_pdim;
  GDXSTRINDEXPTRS_INIT(UelFilterStr_dim,UelFilterStr_pdim); /* assign pdim */
  UelFilterStr_sidim = gdxCurrentDim(TGXFile);
  for(UelFilterStr_cnt=0;UelFilterStr_cnt<UelFilterStr_sidim;UelFilterStr_cnt++)
  {
    strncpy(UelFilterStr_pdim[UelFilterStr_cnt],(char *) UelFilterStr + UelFilterStr_cnt*256 + 1,(unsigned char) UelFilterStr[UelFilterStr_cnt*256]);
    UelFilterStr_dim[UelFilterStr_cnt][(unsigned char) UelFilterStr[UelFilterStr_cnt*256]] = '\0';
  }
  gdxDataReadSlice_result = gdxDataReadSlice(TGXFile, (const char **) UelFilterStr_pdim, Dimen, DP);
  return gdxDataReadSlice_result;
}

GDX_API int GDX_CALLCONV D__gdxDataReadStr(TGXFileRec_t *TGXFile, char *KeyStr, double Values[], int *DimFrst);
GDX_API int GDX_CALLCONV D__gdxDataReadStr(TGXFileRec_t *TGXFile, char *KeyStr, double Values[], int *DimFrst)
{
  int  gdxDataReadStr_result;
  int KeyStr_cnt;
  int KeyStr_sidim;
  gdxStrIndex_t KeyStr_dim;
  gdxStrIndexPtrs_t KeyStr_pdim;
  GDXSTRINDEXPTRS_INIT(KeyStr_dim,KeyStr_pdim); /* assign pdim */
  KeyStr_sidim = gdxCurrentDim(TGXFile);
  /*for(KeyStr_cnt=0;KeyStr_cnt<KeyStr_sidim;KeyStr_cnt++)
  {
    strncpy(KeyStr_pdim[KeyStr_cnt],(char *) KeyStr + KeyStr_cnt*256 + 1,(unsigned char) KeyStr[KeyStr_cnt*256]);
    KeyStr_dim[KeyStr_cnt][(unsigned char) KeyStr[KeyStr_cnt*256]] = '\0';
  }*/
  gdxDataReadStr_result = gdxDataReadStr(TGXFile, KeyStr_pdim, Values, DimFrst);
        
  for(KeyStr_cnt=0;KeyStr_cnt<KeyStr_sidim;KeyStr_cnt++)
  {
    strncpy(KeyStr + KeyStr_cnt*256 + 1,KeyStr_pdim[KeyStr_cnt],(strlen(KeyStr_pdim[KeyStr_cnt])>255?255:strlen(KeyStr_pdim[KeyStr_cnt])));
    KeyStr[KeyStr_cnt*256] = strlen(KeyStr_pdim[KeyStr_cnt]);
  }
  return gdxDataReadStr_result;
}

GDX_API int GDX_CALLCONV D__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const int SliceKeyInt[], char *KeyStr);
GDX_API int GDX_CALLCONV D__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const int SliceKeyInt[], char *KeyStr)
{
  int  gdxDataSliceUELS_result;
  int KeyStr_cnt;
  int KeyStr_sidim;
  gdxStrIndex_t KeyStr_dim;
  gdxStrIndexPtrs_t KeyStr_pdim;
  GDXSTRINDEXPTRS_INIT(KeyStr_dim,KeyStr_pdim); /* assign pdim */
  KeyStr_sidim = gdxCurrentDim(TGXFile);
  /*for(KeyStr_cnt=0;KeyStr_cnt<KeyStr_sidim;KeyStr_cnt++)
  {
    strncpy(KeyStr_pdim[KeyStr_cnt],(char *) KeyStr + KeyStr_cnt*256 + 1,(unsigned char) KeyStr[KeyStr_cnt*256]);
    KeyStr_dim[KeyStr_cnt][(unsigned char) KeyStr[KeyStr_cnt*256]] = '\0';
  }*/
  gdxDataSliceUELS_result = gdxDataSliceUELS(TGXFile, SliceKeyInt, KeyStr_pdim);
        
  for(KeyStr_cnt=0;KeyStr_cnt<KeyStr_sidim;KeyStr_cnt++)
  {
    strncpy(KeyStr + KeyStr_cnt*256 + 1,KeyStr_pdim[KeyStr_cnt],(strlen(KeyStr_pdim[KeyStr_cnt])>255?255:strlen(KeyStr_pdim[KeyStr_cnt])));
    KeyStr[KeyStr_cnt*256] = strlen(KeyStr_pdim[KeyStr_cnt]);
  }
  return gdxDataSliceUELS_result;
}

GDX_API int GDX_CALLCONV D__gdxDataWriteMapStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV D__gdxDataWriteMapStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  int  gdxDataWriteMapStart_result;
  char SyId_sst[256];
  char ExplTxt_sst[256];
  strncpy(SyId_sst,(char *) SyId + 1,(unsigned char) SyId[0]);
  SyId_sst[(unsigned char) SyId[0]] = '\0';
  strncpy(ExplTxt_sst,(char *) ExplTxt + 1,(unsigned char) ExplTxt[0]);
  ExplTxt_sst[(unsigned char) ExplTxt[0]] = '\0';
  gdxDataWriteMapStart_result = gdxDataWriteMapStart(TGXFile, SyId_sst, ExplTxt_sst, Dimen, Typ, UserInfo);
  return gdxDataWriteMapStart_result;
}

GDX_API int GDX_CALLCONV D__gdxDataWriteRawStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV D__gdxDataWriteRawStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  int  gdxDataWriteRawStart_result;
  char SyId_sst[256];
  char ExplTxt_sst[256];
  strncpy(SyId_sst,(char *) SyId + 1,(unsigned char) SyId[0]);
  SyId_sst[(unsigned char) SyId[0]] = '\0';
  strncpy(ExplTxt_sst,(char *) ExplTxt + 1,(unsigned char) ExplTxt[0]);
  ExplTxt_sst[(unsigned char) ExplTxt[0]] = '\0';
  gdxDataWriteRawStart_result = gdxDataWriteRawStart(TGXFile, SyId_sst, ExplTxt_sst, Dimen, Typ, UserInfo);
  return gdxDataWriteRawStart_result;
}

GDX_API int GDX_CALLCONV D__gdxDataWriteStr(TGXFileRec_t *TGXFile, const char *KeyStr, const double Values[]);
GDX_API int GDX_CALLCONV D__gdxDataWriteStr(TGXFileRec_t *TGXFile, const char *KeyStr, const double Values[])
{
  int  gdxDataWriteStr_result;
  int KeyStr_cnt;
  int KeyStr_sidim;
  gdxStrIndex_t KeyStr_dim;
  gdxStrIndexPtrs_t KeyStr_pdim;
  GDXSTRINDEXPTRS_INIT(KeyStr_dim,KeyStr_pdim); /* assign pdim */
  KeyStr_sidim = gdxCurrentDim(TGXFile);
  for(KeyStr_cnt=0;KeyStr_cnt<KeyStr_sidim;KeyStr_cnt++)
  {
    strncpy(KeyStr_pdim[KeyStr_cnt],(char *) KeyStr + KeyStr_cnt*256 + 1,(unsigned char) KeyStr[KeyStr_cnt*256]);
    KeyStr_dim[KeyStr_cnt][(unsigned char) KeyStr[KeyStr_cnt*256]] = '\0';
  }
  gdxDataWriteStr_result = gdxDataWriteStr(TGXFile, (const char **) KeyStr_pdim, Values);
  return gdxDataWriteStr_result;
}

GDX_API int GDX_CALLCONV D__gdxDataWriteStrStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo);
GDX_API int GDX_CALLCONV D__gdxDataWriteStrStart(TGXFileRec_t *TGXFile, const char *SyId, const char *ExplTxt, int Dimen, int Typ, int UserInfo)
{
  int  gdxDataWriteStrStart_result;
  char SyId_sst[256];
  char ExplTxt_sst[256];
  strncpy(SyId_sst,(char *) SyId + 1,(unsigned char) SyId[0]);
  SyId_sst[(unsigned char) SyId[0]] = '\0';
  strncpy(ExplTxt_sst,(char *) ExplTxt + 1,(unsigned char) ExplTxt[0]);
  ExplTxt_sst[(unsigned char) ExplTxt[0]] = '\0';
  gdxDataWriteStrStart_result = gdxDataWriteStrStart(TGXFile, SyId_sst, ExplTxt_sst, Dimen, Typ, UserInfo);
  return gdxDataWriteStrStart_result;
}

GDX_API int GDX_CALLCONV D__gdxGetDLLVersion(TGXFileRec_t *TGXFile, char *V);
GDX_API int GDX_CALLCONV D__gdxGetDLLVersion(TGXFileRec_t *TGXFile, char *V)
{
  int  gdxGetDLLVersion_result;
  char V_sst[256];
  char *V_local;
  gdxGetDLLVersion_result = gdxGetDLLVersion(TGXFile, V_sst);
  V_local = V+1;
  strncpy(V_local,V_sst,(strlen(V_sst)>255?255:strlen(V_sst)));
  V[0] = strlen(V_sst);
  return gdxGetDLLVersion_result;
}

GDX_API int GDX_CALLCONV D__gdxErrorStr(TGXFileRec_t *TGXFile, int ErrNr, char *ErrMsg);
GDX_API int GDX_CALLCONV D__gdxErrorStr(TGXFileRec_t *TGXFile, int ErrNr, char *ErrMsg)
{
  int  gdxErrorStr_result;
  char ErrMsg_sst[256];
  char *ErrMsg_local;
  gdxErrorStr_result = gdxErrorStr(TGXFile, ErrNr, ErrMsg_sst);
  ErrMsg_local = ErrMsg+1;
  strncpy(ErrMsg_local,ErrMsg_sst,(strlen(ErrMsg_sst)>255?255:strlen(ErrMsg_sst)));
  ErrMsg[0] = strlen(ErrMsg_sst);
  return gdxErrorStr_result;
}

GDX_API int GDX_CALLCONV D__gdxFileVersion(TGXFileRec_t *TGXFile, char *FileStr, char *ProduceStr);
GDX_API int GDX_CALLCONV D__gdxFileVersion(TGXFileRec_t *TGXFile, char *FileStr, char *ProduceStr)
{
  int  gdxFileVersion_result;
  char FileStr_sst[256];
  char *FileStr_local;
  char ProduceStr_sst[256];
  char *ProduceStr_local;
  gdxFileVersion_result = gdxFileVersion(TGXFile, FileStr_sst, ProduceStr_sst);
  FileStr_local = FileStr+1;
  strncpy(FileStr_local,FileStr_sst,(strlen(FileStr_sst)>255?255:strlen(FileStr_sst)));
  FileStr[0] = strlen(FileStr_sst);
  ProduceStr_local = ProduceStr+1;
  strncpy(ProduceStr_local,ProduceStr_sst,(strlen(ProduceStr_sst)>255?255:strlen(ProduceStr_sst)));
  ProduceStr[0] = strlen(ProduceStr_sst);
  return gdxFileVersion_result;
}

GDX_API int GDX_CALLCONV D__gdxFindSymbol(TGXFileRec_t *TGXFile, const char *SyId, int *SyNr);
GDX_API int GDX_CALLCONV D__gdxFindSymbol(TGXFileRec_t *TGXFile, const char *SyId, int *SyNr)
{
  int  gdxFindSymbol_result;
  char SyId_sst[256];
  strncpy(SyId_sst,(char *) SyId + 1,(unsigned char) SyId[0]);
  SyId_sst[(unsigned char) SyId[0]] = '\0';
  gdxFindSymbol_result = gdxFindSymbol(TGXFile, SyId_sst, SyNr);
  return gdxFindSymbol_result;
}

GDX_API int GDX_CALLCONV D__gdxGetElemText(TGXFileRec_t *TGXFile, int TxtNr, char *Txt, int *Node);
GDX_API int GDX_CALLCONV D__gdxGetElemText(TGXFileRec_t *TGXFile, int TxtNr, char *Txt, int *Node)
{
  int  gdxGetElemText_result;
  char Txt_sst[256];
  char *Txt_local;
  gdxGetElemText_result = gdxGetElemText(TGXFile, TxtNr, Txt_sst, Node);
  Txt_local = Txt+1;
  strncpy(Txt_local,Txt_sst,(strlen(Txt_sst)>255?255:strlen(Txt_sst)));
  Txt[0] = strlen(Txt_sst);
  return gdxGetElemText_result;
}

GDX_API int GDX_CALLCONV D__gdxGetUEL(TGXFileRec_t *TGXFile, int UelNr, char *Uel);
GDX_API int GDX_CALLCONV D__gdxGetUEL(TGXFileRec_t *TGXFile, int UelNr, char *Uel)
{
  int  gdxGetUEL_result;
  char Uel_sst[256];
  char *Uel_local;
  gdxGetUEL_result = gdxGetUEL(TGXFile, UelNr, Uel_sst);
  Uel_local = Uel+1;
  strncpy(Uel_local,Uel_sst,(strlen(Uel_sst)>255?255:strlen(Uel_sst)));
  Uel[0] = strlen(Uel_sst);
  return gdxGetUEL_result;
}

GDX_API int GDX_CALLCONV D__gdxOpenAppend(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr);
GDX_API int GDX_CALLCONV D__gdxOpenAppend(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr)
{
  int  gdxOpenAppend_result;
  char FileName_sst[256];
  char Producer_sst[256];
  strncpy(FileName_sst,(char *) FileName + 1,(unsigned char) FileName[0]);
  FileName_sst[(unsigned char) FileName[0]] = '\0';
  strncpy(Producer_sst,(char *) Producer + 1,(unsigned char) Producer[0]);
  Producer_sst[(unsigned char) Producer[0]] = '\0';
  gdxOpenAppend_result = gdxOpenAppend(TGXFile, FileName_sst, Producer_sst, ErrNr);
  return gdxOpenAppend_result;
}

GDX_API int GDX_CALLCONV D__gdxOpenRead(TGXFileRec_t *TGXFile, const char *FileName, int *ErrNr);
GDX_API int GDX_CALLCONV D__gdxOpenRead(TGXFileRec_t *TGXFile, const char *FileName, int *ErrNr)
{
  int  gdxOpenRead_result;
  char FileName_sst[256];
  strncpy(FileName_sst,(char *) FileName + 1,(unsigned char) FileName[0]);
  FileName_sst[(unsigned char) FileName[0]] = '\0';
  gdxOpenRead_result = gdxOpenRead(TGXFile, FileName_sst, ErrNr);
  return gdxOpenRead_result;
}

GDX_API int GDX_CALLCONV D__gdxOpenReadEx(TGXFileRec_t *TGXFile, const char *FileName, int ReadMode, int *ErrNr);
GDX_API int GDX_CALLCONV D__gdxOpenReadEx(TGXFileRec_t *TGXFile, const char *FileName, int ReadMode, int *ErrNr)
{
  int  gdxOpenReadEx_result;
  char FileName_sst[256];
  strncpy(FileName_sst,(char *) FileName + 1,(unsigned char) FileName[0]);
  FileName_sst[(unsigned char) FileName[0]] = '\0';
  gdxOpenReadEx_result = gdxOpenReadEx(TGXFile, FileName_sst, ReadMode, ErrNr);
  return gdxOpenReadEx_result;
}

GDX_API int GDX_CALLCONV D__gdxOpenWrite(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr);
GDX_API int GDX_CALLCONV D__gdxOpenWrite(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int *ErrNr)
{
  int  gdxOpenWrite_result;
  char FileName_sst[256];
  char Producer_sst[256];
  strncpy(FileName_sst,(char *) FileName + 1,(unsigned char) FileName[0]);
  FileName_sst[(unsigned char) FileName[0]] = '\0';
  strncpy(Producer_sst,(char *) Producer + 1,(unsigned char) Producer[0]);
  Producer_sst[(unsigned char) Producer[0]] = '\0';
  gdxOpenWrite_result = gdxOpenWrite(TGXFile, FileName_sst, Producer_sst, ErrNr);
  return gdxOpenWrite_result;
}

GDX_API int GDX_CALLCONV D__gdxOpenWriteEx(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int Compr, int *ErrNr);
GDX_API int GDX_CALLCONV D__gdxOpenWriteEx(TGXFileRec_t *TGXFile, const char *FileName, const char *Producer, int Compr, int *ErrNr)
{
  int  gdxOpenWriteEx_result;
  char FileName_sst[256];
  char Producer_sst[256];
  strncpy(FileName_sst,(char *) FileName + 1,(unsigned char) FileName[0]);
  FileName_sst[(unsigned char) FileName[0]] = '\0';
  strncpy(Producer_sst,(char *) Producer + 1,(unsigned char) Producer[0]);
  Producer_sst[(unsigned char) Producer[0]] = '\0';
  gdxOpenWriteEx_result = gdxOpenWriteEx(TGXFile, FileName_sst, Producer_sst, Compr, ErrNr);
  return gdxOpenWriteEx_result;
}

GDX_API int GDX_CALLCONV D__gdxSetTraceLevel(TGXFileRec_t *TGXFile, int N, const char *s);
GDX_API int GDX_CALLCONV D__gdxSetTraceLevel(TGXFileRec_t *TGXFile, int N, const char *s)
{
  int  gdxSetTraceLevel_result;
  char s_sst[256];
  strncpy(s_sst,(char *) s + 1,(unsigned char) s[0]);
  s_sst[(unsigned char) s[0]] = '\0';
  gdxSetTraceLevel_result = gdxSetTraceLevel(TGXFile, N, s_sst);
  return gdxSetTraceLevel_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolAddComment(TGXFileRec_t *TGXFile, int SyNr, const char *Txt);
GDX_API int GDX_CALLCONV D__gdxSymbolAddComment(TGXFileRec_t *TGXFile, int SyNr, const char *Txt)
{
  int  gdxSymbolAddComment_result;
  char Txt_sst[256];
  strncpy(Txt_sst,(char *) Txt + 1,(unsigned char) Txt[0]);
  Txt_sst[(unsigned char) Txt[0]] = '\0';
  gdxSymbolAddComment_result = gdxSymbolAddComment(TGXFile, SyNr, Txt_sst);
  return gdxSymbolAddComment_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolGetComment(TGXFileRec_t *TGXFile, int SyNr, int N, char *Txt);
GDX_API int GDX_CALLCONV D__gdxSymbolGetComment(TGXFileRec_t *TGXFile, int SyNr, int N, char *Txt)
{
  int  gdxSymbolGetComment_result;
  char Txt_sst[256];
  char *Txt_local;
  gdxSymbolGetComment_result = gdxSymbolGetComment(TGXFile, SyNr, N, Txt_sst);
  Txt_local = Txt+1;
  strncpy(Txt_local,Txt_sst,(strlen(Txt_sst)>255?255:strlen(Txt_sst)));
  Txt[0] = strlen(Txt_sst);
  return gdxSymbolGetComment_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile, int SyNr, char *DomainIDs);
GDX_API int GDX_CALLCONV D__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile, int SyNr, char *DomainIDs)
{
  int  gdxSymbolGetDomainX_result;
  int DomainIDs_cnt;
  int DomainIDs_sidim;
  gdxStrIndex_t DomainIDs_dim;
  gdxStrIndexPtrs_t DomainIDs_pdim;
  GDXSTRINDEXPTRS_INIT(DomainIDs_dim,DomainIDs_pdim); /* assign pdim */
  DomainIDs_sidim = gdxSymbolDim(TGXFile, SyNr);
  /*for(DomainIDs_cnt=0;DomainIDs_cnt<DomainIDs_sidim;DomainIDs_cnt++)
  {
    strncpy(DomainIDs_pdim[DomainIDs_cnt],(char *) DomainIDs + DomainIDs_cnt*256 + 1,(unsigned char) DomainIDs[DomainIDs_cnt*256]);
    DomainIDs_dim[DomainIDs_cnt][(unsigned char) DomainIDs[DomainIDs_cnt*256]] = '\0';
  }*/
  gdxSymbolGetDomainX_result = gdxSymbolGetDomainX(TGXFile, SyNr, DomainIDs_pdim);
        
  for(DomainIDs_cnt=0;DomainIDs_cnt<DomainIDs_sidim;DomainIDs_cnt++)
  {
    strncpy(DomainIDs + DomainIDs_cnt*256 + 1,DomainIDs_pdim[DomainIDs_cnt],(strlen(DomainIDs_pdim[DomainIDs_cnt])>255?255:strlen(DomainIDs_pdim[DomainIDs_cnt])));
    DomainIDs[DomainIDs_cnt*256] = strlen(DomainIDs_pdim[DomainIDs_cnt]);
  }
  return gdxSymbolGetDomainX_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolInfo(TGXFileRec_t *TGXFile, int SyNr, char *SyId, int *Dimen, int *Typ);
GDX_API int GDX_CALLCONV D__gdxSymbolInfo(TGXFileRec_t *TGXFile, int SyNr, char *SyId, int *Dimen, int *Typ)
{
  int  gdxSymbolInfo_result;
  char SyId_sst[256];
  char *SyId_local;
  gdxSymbolInfo_result = gdxSymbolInfo(TGXFile, SyNr, SyId_sst, Dimen, Typ);
  SyId_local = SyId+1;
  strncpy(SyId_local,SyId_sst,(strlen(SyId_sst)>255?255:strlen(SyId_sst)));
  SyId[0] = strlen(SyId_sst);
  return gdxSymbolInfo_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolInfoX(TGXFileRec_t *TGXFile, int SyNr, int *RecCnt, int *UserInfo, char *ExplTxt);
GDX_API int GDX_CALLCONV D__gdxSymbolInfoX(TGXFileRec_t *TGXFile, int SyNr, int *RecCnt, int *UserInfo, char *ExplTxt)
{
  int  gdxSymbolInfoX_result;
  char ExplTxt_sst[256];
  char *ExplTxt_local;
  gdxSymbolInfoX_result = gdxSymbolInfoX(TGXFile, SyNr, RecCnt, UserInfo, ExplTxt_sst);
  ExplTxt_local = ExplTxt+1;
  strncpy(ExplTxt_local,ExplTxt_sst,(strlen(ExplTxt_sst)>255?255:strlen(ExplTxt_sst)));
  ExplTxt[0] = strlen(ExplTxt_sst);
  return gdxSymbolInfoX_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolSetDomain(TGXFileRec_t *TGXFile, const char *DomainIDs);
GDX_API int GDX_CALLCONV D__gdxSymbolSetDomain(TGXFileRec_t *TGXFile, const char *DomainIDs)
{
  int  gdxSymbolSetDomain_result;
  int DomainIDs_cnt;
  int DomainIDs_sidim;
  gdxStrIndex_t DomainIDs_dim;
  gdxStrIndexPtrs_t DomainIDs_pdim;
  GDXSTRINDEXPTRS_INIT(DomainIDs_dim,DomainIDs_pdim); /* assign pdim */
  DomainIDs_sidim = gdxCurrentDim(TGXFile);
  for(DomainIDs_cnt=0;DomainIDs_cnt<DomainIDs_sidim;DomainIDs_cnt++)
  {
    strncpy(DomainIDs_pdim[DomainIDs_cnt],(char *) DomainIDs + DomainIDs_cnt*256 + 1,(unsigned char) DomainIDs[DomainIDs_cnt*256]);
    DomainIDs_dim[DomainIDs_cnt][(unsigned char) DomainIDs[DomainIDs_cnt*256]] = '\0';
  }
  gdxSymbolSetDomain_result = gdxSymbolSetDomain(TGXFile, (const char **) DomainIDs_pdim);
  return gdxSymbolSetDomain_result;
}

GDX_API int GDX_CALLCONV D__gdxSymbolSetDomainX(TGXFileRec_t *TGXFile, int SyNr, const char *DomainIDs);
GDX_API int GDX_CALLCONV D__gdxSymbolSetDomainX(TGXFileRec_t *TGXFile, int SyNr, const char *DomainIDs)
{
  int  gdxSymbolSetDomainX_result;
  int DomainIDs_cnt;
  int DomainIDs_sidim;
  gdxStrIndex_t DomainIDs_dim;
  gdxStrIndexPtrs_t DomainIDs_pdim;
  GDXSTRINDEXPTRS_INIT(DomainIDs_dim,DomainIDs_pdim); /* assign pdim */
  DomainIDs_sidim = gdxSymbolDim(TGXFile, SyNr);
  for(DomainIDs_cnt=0;DomainIDs_cnt<DomainIDs_sidim;DomainIDs_cnt++)
  {
    strncpy(DomainIDs_pdim[DomainIDs_cnt],(char *) DomainIDs + DomainIDs_cnt*256 + 1,(unsigned char) DomainIDs[DomainIDs_cnt*256]);
    DomainIDs_dim[DomainIDs_cnt][(unsigned char) DomainIDs[DomainIDs_cnt*256]] = '\0';
  }
  gdxSymbolSetDomainX_result = gdxSymbolSetDomainX(TGXFile, SyNr, (const char **) DomainIDs_pdim);
  return gdxSymbolSetDomainX_result;
}

GDX_API int GDX_CALLCONV D__gdxUELRegisterMap(TGXFileRec_t *TGXFile, int UMap, const char *Uel);
GDX_API int GDX_CALLCONV D__gdxUELRegisterMap(TGXFileRec_t *TGXFile, int UMap, const char *Uel)
{
  int  gdxUELRegisterMap_result;
  char Uel_sst[256];
  strncpy(Uel_sst,(char *) Uel + 1,(unsigned char) Uel[0]);
  Uel_sst[(unsigned char) Uel[0]] = '\0';
  gdxUELRegisterMap_result = gdxUELRegisterMap(TGXFile, UMap, Uel_sst);
  return gdxUELRegisterMap_result;
}

GDX_API int GDX_CALLCONV D__gdxUELRegisterRaw(TGXFileRec_t *TGXFile, const char *Uel);
GDX_API int GDX_CALLCONV D__gdxUELRegisterRaw(TGXFileRec_t *TGXFile, const char *Uel)
{
  int  gdxUELRegisterRaw_result;
  char Uel_sst[256];
  strncpy(Uel_sst,(char *) Uel + 1,(unsigned char) Uel[0]);
  Uel_sst[(unsigned char) Uel[0]] = '\0';
  gdxUELRegisterRaw_result = gdxUELRegisterRaw(TGXFile, Uel_sst);
  return gdxUELRegisterRaw_result;
}

GDX_API int GDX_CALLCONV D__gdxUELRegisterStr(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr);
GDX_API int GDX_CALLCONV D__gdxUELRegisterStr(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr)
{
  int  gdxUELRegisterStr_result;
  char Uel_sst[256];
  strncpy(Uel_sst,(char *) Uel + 1,(unsigned char) Uel[0]);
  Uel_sst[(unsigned char) Uel[0]] = '\0';
  gdxUELRegisterStr_result = gdxUELRegisterStr(TGXFile, Uel_sst, UelNr);
  return gdxUELRegisterStr_result;
}

GDX_API int GDX_CALLCONV D__gdxUMFindUEL(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr, int *UelMap);
GDX_API int GDX_CALLCONV D__gdxUMFindUEL(TGXFileRec_t *TGXFile, const char *Uel, int *UelNr, int *UelMap)
{
  int  gdxUMFindUEL_result;
  char Uel_sst[256];
  strncpy(Uel_sst,(char *) Uel + 1,(unsigned char) Uel[0]);
  Uel_sst[(unsigned char) Uel[0]] = '\0';
  gdxUMFindUEL_result = gdxUMFindUEL(TGXFile, Uel_sst, UelNr, UelMap);
  return gdxUMFindUEL_result;
}

GDX_API int GDX_CALLCONV D__gdxUMUelGet(TGXFileRec_t *TGXFile, int UelNr, char *Uel, int *UelMap);
GDX_API int GDX_CALLCONV D__gdxUMUelGet(TGXFileRec_t *TGXFile, int UelNr, char *Uel, int *UelMap)
{
  int  gdxUMUelGet_result;
  char Uel_sst[256];
  char *Uel_local;
  gdxUMUelGet_result = gdxUMUelGet(TGXFile, UelNr, Uel_sst, UelMap);
  Uel_local = Uel+1;
  strncpy(Uel_local,Uel_sst,(strlen(Uel_sst)>255?255:strlen(Uel_sst)));
  Uel[0] = strlen(Uel_sst);
  return gdxUMUelGet_result;
}

GDX_API int GDX_CALLCONV D__gdxRenameUEL(TGXFileRec_t *TGXFile, const char *OldName, const char *NewName);
GDX_API int GDX_CALLCONV D__gdxRenameUEL(TGXFileRec_t *TGXFile, const char *OldName, const char *NewName)
{
  int  gdxRenameUEL_result;
  char OldName_sst[256];
  char NewName_sst[256];
  strncpy(OldName_sst,(char *) OldName + 1,(unsigned char) OldName[0]);
  OldName_sst[(unsigned char) OldName[0]] = '\0';
  strncpy(NewName_sst,(char *) NewName + 1,(unsigned char) NewName[0]);
  NewName_sst[(unsigned char) NewName[0]] = '\0';
  gdxRenameUEL_result = gdxRenameUEL(TGXFile, OldName_sst, NewName_sst);
  return gdxRenameUEL_result;
}

GDX_API int GDX_CALLCONV N__gdxDataReadStr(TGXFileRec_t *TGXFile, gdxStrIndex_t KeyStr,  double Values[],  int *DimFrst);
GDX_API int GDX_CALLCONV N__gdxDataReadStr(TGXFileRec_t *TGXFile, gdxStrIndex_t KeyStr,  double Values[],  int *DimFrst)
{
  int  gdxDataReadStr_result;
  gdxStrIndexPtrs_t KeyStr_pdim;
  GDXSTRINDEXPTRS_INIT(KeyStr,KeyStr_pdim); /* assign pdim */
  gdxDataReadStr_result = gdxDataReadStr(TGXFile, KeyStr_pdim,Values,DimFrst);
  return gdxDataReadStr_result;
}
  

GDX_API int GDX_CALLCONV N__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const  int SliceKeyInt[], gdxStrIndex_t KeyStr);
GDX_API int GDX_CALLCONV N__gdxDataSliceUELS(TGXFileRec_t *TGXFile, const  int SliceKeyInt[], gdxStrIndex_t KeyStr)
{
  int  gdxDataSliceUELS_result;
  gdxStrIndexPtrs_t KeyStr_pdim;
  GDXSTRINDEXPTRS_INIT(KeyStr,KeyStr_pdim); /* assign pdim */
  gdxDataSliceUELS_result = gdxDataSliceUELS(TGXFile,SliceKeyInt, KeyStr_pdim);
  return gdxDataSliceUELS_result;
}
  

GDX_API int GDX_CALLCONV N__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile,  int SyNr, gdxStrIndex_t DomainIDs);
GDX_API int GDX_CALLCONV N__gdxSymbolGetDomainX(TGXFileRec_t *TGXFile,  int SyNr, gdxStrIndex_t DomainIDs)
{
  int  gdxSymbolGetDomainX_result;
  gdxStrIndexPtrs_t DomainIDs_pdim;
  GDXSTRINDEXPTRS_INIT(DomainIDs,DomainIDs_pdim); /* assign pdim */
  gdxSymbolGetDomainX_result = gdxSymbolGetDomainX(TGXFile,SyNr, DomainIDs_pdim);
  return gdxSymbolGetDomainX_result;
}
  

GDX_API int GDX_CALLCONV F__gdxDataReadRawFast(TGXFileRec_t *TGXFile, int SyNr, TDataStoreProc_F_t DP, int *NrRecs);
GDX_API int GDX_CALLCONV F__gdxDataReadRawFast(TGXFileRec_t *TGXFile, int SyNr, TDataStoreProc_F_t DP, int *NrRecs)
{setCallByRef(TGXFile, "gdxDataReadRawFast_DP", 1);
  return gdxDataReadRawFast(TGXFile, SyNr, (TDataStoreProc_t) DP, NrRecs);
}

GDX_API int GDX_CALLCONV F__gdxDataReadRawFastEx(TGXFileRec_t *TGXFile, int SyNr, TDataStoreExProc_F_t DP, int *NrRecs, void *Uptr);
GDX_API int GDX_CALLCONV F__gdxDataReadRawFastEx(TGXFileRec_t *TGXFile, int SyNr, TDataStoreExProc_F_t DP, int *NrRecs, void *Uptr)
{setCallByRef(TGXFile, "gdxDataReadRawFastEx_DP", 1);
  return gdxDataReadRawFastEx(TGXFile, SyNr, (TDataStoreExProc_t) DP, NrRecs, Uptr);
}

GDX_API int GDX_CALLCONV F__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr[], TDataStoreFiltProc_F_t DP);
GDX_API int GDX_CALLCONV F__gdxDataReadRawFastFilt(TGXFileRec_t *TGXFile, int SyNr, const char *UelFilterStr[], TDataStoreFiltProc_F_t DP)
{setCallByRef(TGXFile, "gdxDataReadRawFastFilt_DP", 1);
  return gdxDataReadRawFastFilt(TGXFile, SyNr, UelFilterStr, (TDataStoreFiltProc_t) DP);
}

GDX_API int GDX_CALLCONV F__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr[], int *Dimen, TDataStoreProc_F_t DP);
GDX_API int GDX_CALLCONV F__gdxDataReadSlice(TGXFileRec_t *TGXFile, const char *UelFilterStr[], int *Dimen, TDataStoreProc_F_t DP)
{setCallByRef(TGXFile, "gdxDataReadSlice_DP", 1);
  return gdxDataReadSlice(TGXFile, UelFilterStr, Dimen, (TDataStoreProc_t) DP);
}

GDX_API int GDX_CALLCONV F__gdxGetDomainElements(TGXFileRec_t *TGXFile, int SyNr, int DimPos, int FilterNr, TDomainIndexProc_F_t DP, int *NrElem, void *Uptr);
GDX_API int GDX_CALLCONV F__gdxGetDomainElements(TGXFileRec_t *TGXFile, int SyNr, int DimPos, int FilterNr, TDomainIndexProc_F_t DP, int *NrElem, void *Uptr)
{setCallByRef(TGXFile, "gdxGetDomainElements_DP", 1);
  return gdxGetDomainElements(TGXFile, SyNr, DimPos, FilterNr, (TDomainIndexProc_t) DP, NrElem, Uptr);
}

GDX_API int  GDX_CALLCONV C__gdxStoreDomainSets(TGXFileRec_t *TGXFile);
GDX_API int  GDX_CALLCONV C__gdxStoreDomainSets(TGXFileRec_t *TGXFile)
{
  return gdxStoreDomainSets(TGXFile);
}

GDX_API void GDX_CALLCONV C__gdxStoreDomainSetsSet(TGXFileRec_t *TGXFile, int x);
GDX_API void GDX_CALLCONV C__gdxStoreDomainSetsSet(TGXFileRec_t *TGXFile, int x)
{
  gdxStoreDomainSetsSet(TGXFile,x);
}

GDX_API int  GDX_CALLCONV C__gdxAllowBogusDomains(TGXFileRec_t *TGXFile);
GDX_API int  GDX_CALLCONV C__gdxAllowBogusDomains(TGXFileRec_t *TGXFile)
{
  return gdxAllowBogusDomains(TGXFile);
}

GDX_API void GDX_CALLCONV C__gdxAllowBogusDomainsSet(TGXFileRec_t *TGXFile, int x);
GDX_API void GDX_CALLCONV C__gdxAllowBogusDomainsSet(TGXFileRec_t *TGXFile, int x)
{
  gdxAllowBogusDomainsSet(TGXFile,x);
}

#endif

