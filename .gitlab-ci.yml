stages:
  - image-build
  - apiwrap
  - fetch-scripts
  - install-gams
  - build
  - analyze
  - test
  - leak-check
  - perf-check
  - docs
  - deploy

#=======================================================================================================================

include:
  - project: 'devel/ciscripts'
    file: .install-jobs.yml
  - project: 'devel/ciscripts'
    file: .shared-vars.yml
  - project: 'devel/ciscripts'
    file: .image-build.yml
  - project: 'devel/ciscripts'
    file: .codechecker.yml

variables:
  extends: .shared-variables
  GIT_SUBMODULE_STRATEGY: recursive

#=======================================================================================================================

build-leg-image:
  extends: .build-leg-image
  script:
    - docker build -t registry.gams.com/devel/gdx/leg/builder-gdx:latest ci/images/leg
    - docker push registry.gams.com/devel/gdx/leg/builder-gdx:latest

build-leg-analyze-image:
  extends: .build-leg-image
  script:
    - docker build -t registry.gams.com/devel/gdx/leg/builder-analyze:latest ci/images/leg-analyze
    - docker push registry.gams.com/devel/gdx/leg/builder-analyze:latest

build-leg-deploy-image:
  extends: .build-leg-image
  script:
    - docker build -t registry.gams.com/devel/gdx/leg/builder-deploy:latest ci/images/leg-deploy
    - docker push registry.gams.com/devel/gdx/leg/builder-deploy:latest

#=======================================================================================================================

apigenerator:
  stage: apiwrap
  tags: [linux]
  dependencies: []
  image:
    name: registry.gams.com/devel/gdx/leg/builder-gdx:latest
    entrypoint: [ "" ]
  script:
    - mkdir -p apifiles
    - python3 src/yaml2doxy.py --input src/gdxapi.yaml --template_folder src/templates --output apifiles/gdx.h
    - python3 src/yaml2cwrap.py --input src/gdxapi.yaml --template_folder src/templates --output apifiles/cwrap.hpp
    - >
      python3
      src/yaml2cwrap.py
      --input src/gdxapi.yaml
      --output apifiles/gdxcppwrap.h 
      --template_folder src/templates
      --template gdxcppwrap.template.j2
    # somehow I need absolute path for apidef arg
    - python3 src/apigenerator/src/mkapi.py --apidef `pwd`/src/gdxapi.yaml --outputpath apifiles/ --output cc cpplib
    - cp src/apigenerator/include/gc*.h apifiles
    - cp src/gdx.h generated/gdx.h
    - |
      for f in "gdxcc.h" "gdxcc.c" "gdxcclib.cpp" "gclgms.h" "gdx.h" "cwrap.hpp" "gdxcppwrap.h"; do
        echo "Diffing 'apifiles/$f' with 'generated/$f'"
        if ! diff apifiles/$f generated/$f; then
          echo "Warning: $f stored in repo and freshly generated differ!"
        fi
      done
  artifacts:
    name: apifiles
    expire_in: 2 hours
    paths: [apifiles/*]

#=======================================================================================================================

install-gamsdist-leg:
  extends: .install-gams-leg

install-gamsdist-deg:
  extends: .install-gams-deg

install-gamsdist-dac:
  extends: .install-gams-dac

install-gamsdist-wei:
  extends: .install-gams-wei

#=======================================================================================================================

build-leg:
  stage: build
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - cp apifiles/* src/
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON CMakeLists.txt
    - cmake --build . 2>&1 | tee build_log.txt
    - python3 ci/report_for_log.py gcc build_log.txt warnings.xml
  needs: [fetch-ci-scripts,apigenerator]
  artifacts:
    name: gdx-leg
    paths: [gdxtest,gdxwraptest,libgdxcclib64.so]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

build-debug-leg:
  stage: build
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - cp apifiles/* src/
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON CMakeLists.txt
    - cmake --build . 2>&1
    - mv gdxtest gdxtest_dbg
  needs: [fetch-ci-scripts,apigenerator]
  artifacts:
    name: gdx-debug-leg
    paths: [gdxtest_dbg]
    expire_in: 2 hours

build-deg:
  stage: build
  tags: [macos]
  script:
    - cp apifiles/* src/
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_COMPILER=clang++ CMakeLists.txt
    - cmake --build . 2>&1 | tee build_log.txt
    - python3 ci/report_for_log.py clang build_log.txt warnings.xml
  needs: [fetch-ci-scripts,apigenerator]
  artifacts:
    name: gdx-deg
    paths: [gdxtest,gdxwraptest,libgdxcclib64.dylib]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

build-dac:
  stage: build
  tags: [macos-arm64]
  script:
    - cp apifiles/* src/
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_COMPILER=clang++ CMakeLists.txt
    - cmake --build . 2>&1 | tee build_log.txt
    - python3 ci/report_for_log.py clang build_log.txt warnings.xml
  needs: [fetch-ci-scripts,apigenerator]
  artifacts:
    name: gdx-dac
    paths: [gdxtest,gdxwraptest,libgdxcclib64.dylib]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

build-wei:
  stage: build
  tags: [windows]
  image:
    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
  script:
    - cp apifiles/* src/
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON CMakeLists.txt
    - cmake --build  . --config Release -- -m | Tee-Object -FilePath 'build_log.txt'
    - python ci/report_for_log.py msvc build_log.txt warnings.xml
  needs: [fetch-ci-scripts,apigenerator]
  artifacts:
    name: gdx-wei
    paths: [Release]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

#=======================================================================================================================

codechecker-leg:
  extends: .codechecker-leg
  needs: [fetch-ci-scripts,apigenerator]
  script:
    - cp apifiles/* src/
    - !reference [.default-codecheck-script, script]

#=======================================================================================================================

test-leg:
  stage: test
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  needs: [build-leg,install-gamsdist-leg]
  script:
    - GAMS_PATH=/cache/gams-installs/`cat gams_folder_leg.txt`/
    - PATH=$GAMS_PATH:$PATH LD_LIBRARY_PATH="$GAMS_PATH" GMSPYTHONLIB="$GAMS_PATH/GMSPython/lib/libpython3.8.so" ./gdxtest --reporters=junit --out=doctest_results_linux.xml
    - LD_LIBRARY_PATH=`pwd` ./gdxwraptest --reporters=junit --out=doctest_results_wrap_linux.xml
  artifacts:
    name: unittest-results-linux
    paths: [./*.xml]
    expire_in: 2 hours
    reports:
      junit: doctest_results_*linux.xml

test-deg:
  stage: test
  tags: [macos]
  needs: [build-deg,install-gamsdist-deg]
  script:
    - GAMS_PATH=$HOME/cache/gams-installs/`cat gams_folder_deg.txt`
    - PATH=$GAMS_PATH:$PATH DYLD_LIBRARY_PATH=$(pwd)/lib:$GAMS_PATH GMSPYTHONLIB=$GAMS_PATH/GMSPython/lib/libpython3.8.dylib ./gdxtest --reporters=junit --out=doctest_results_deg.xml
    - ./gdxwraptest --reporters=junit --out=doctest_results_wrap_deg.xml
  artifacts:
    name: unittest-results-deg
    paths: [./*.xml]
    reports:
      junit: doctest_results_*deg.xml

test-dac:
  stage: test
  tags: [macos-arm64]
  needs: [build-dac,install-gamsdist-dac]
  script:
    - ./gdxtest --reporters=junit --out=doctest_results_dac.xml
    - ./gdxwraptest --reporters=junit --out=doctest_results_wrap_dac.xml
  artifacts:
    name: unittest-results-dac
    paths: [./*.xml]
    reports:
      junit: doctest_results_*dac.xml

test-wei:
  stage: test
  tags: [windows]
  image:
    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
  needs: [build-wei,install-gamsdist-wei]
  script:
    - $gmsdirname = Get-Content mygmsdir.tmp -Raw
    - $GAMS_PATH = "C:\Cache\gams-installs\$gmsdirname"
    - $env:Path = "$GAMS_PATH;$GAMS_PATH\gbin;" + $env:Path
    - $env:GAMSDIR = "$GAMS_PATH;$GAMS_PATH\gbin"
    - ./Release/gdxtest --reporters=junit --out=doctest_results_windows.xml
    - ./Release/gdxwraptest --reporters=junit --out=doctest_results_wrap_windows.xml
  artifacts:
    name: unittest-results-windows
    paths: [./*.xml]
    reports:
      junit: doctest_results_*windows.xml

#=======================================================================================================================

leak-check-leg:
  stage: leak-check
  tags: [linux]
  image:
    name: registry.gams.com/devel/ciscripts/leg/builder-valgrind-codequality:latest
    entrypoint: [""]
  needs: [fetch-ci-scripts,build-debug-leg,install-gamsdist-leg]
  script:
    - GAMS_PATH=/cache/gams-installs/`cat gams_folder_leg.txt`/
    - PATH=$GAMS_PATH:$PATH LD_LIBRARY_PATH="$GAMS_PATH" GMSPYTHONLIB="$GAMS_PATH/GMSPython/lib/libpython3.8.so" valgrind --leak-check=yes ./gdxtest_dbg
    - valgrind --leak-check=yes --xml=yes --xml-file=valgrind_out.xml ./gdxtest_dbg
    - PYTHONPATH=$PYTHONPATH:valgrind-codequality python3 -m valgrind_codequality --input-file valgrind_out.xml --output-file valgrind_out.json
    - python3 ci/codechecker_to_xml.py valgrind_out.json valgrind_junit.xml
  artifacts:
    name: leak-check-results-leg
    expire_in: 2 hours
    reports:
      codequality: valgrind_out.json
      junit: valgrind_junit.xml
    paths: [valgrind_out.*]

#=======================================================================================================================

perf-check-leg:
  stage: perf-check
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  needs: [fetch-ci-scripts,build-leg,install-gamsdist-leg]
  when: manual
  script:
    - SUITE_NAME=gdxfiles
    - PERF_CALL="gams gdxperf procTreeMemMonitor=1 --RUN=suite --SUITE=${SUITE_NAME} --RUNDEFAULT=0 --RUNCAPI=1"
    - ARCHIVE_NAME="gdxfiles.zip"
    - curl https://cloud.gams.com/s/pxSEJNMWszJn3if/download/gdxfiles.zip > $ARCHIVE_NAME
    - unzip $ARCHIVE_NAME -d $SUITE_NAME
    - rm $ARCHIVE_NAME
    - cp -R /cache/gams-installs/`cat gams_folder_leg.txt` mygamsdist # need local copy as we modify libgdxcclib64.so
    - cp libgdxcclib64.so mygamsdist
    - GAMS_PATH=`pwd`/mygamsdist/
    - ${GAMS_PATH}apilib gdxperf
    - PATH=$GAMS_PATH:$PATH LD_LIBRARY_PATH="$GAMS_PATH" GMSPYTHONLIB="$GAMS_PATH/GMSPython/lib/libpython3.8.so" ${PERF_CALL} | tee cppgdx.log
    - rm -rf mygamsdist
    - python3 ci/fetch_gams.py fetch_and_install dist43 $SSH_KEY_PORTING
    - python3 ci/fetch_gams.py version $PF_CUSTOM_BRANCH $SSH_KEY_PORTING > gams43_folder_leg.txt
    - GAMS_PATH=/cache/gams-installs/`cat gams43_folder_leg.txt`/
    - ${GAMS_PATH}apilib gdxperf
    - PATH=$GAMS_PATH:$PATH LD_LIBRARY_PATH="$GAMS_PATH" GMSPYTHONLIB="$GAMS_PATH/GMSPython/lib/libpython3.8.so" ${PERF_CALL} | tee delphigdx.log
    - python3 ci/perflogparse.py | tee perf.json
  artifacts:
    name: gdxperf-logs
    paths: [cppgdx.log,delphigdx.log,perf.json]
    expire_in: 1 day

#=======================================================================================================================

doxygen-html:
  stage: docs
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - doxygen
  artifacts:
    name: doxygen-html-docs
    paths: [docs/html]
    expire_in: 1 day

#=======================================================================================================================

deploy-github:
  when: manual
  stage: deploy
  tags: [linux]
  needs: [build-leg, build-dac, build-wei, apigenerator]
  image:
    name: registry.gams.com/devel/gdx/leg/builder-deploy:latest
    entrypoint: [""]   # prevent startup.sh
  script:
    - ls
    - PATH="/opt/github-release:${PATH}"
    - github-release
    - cp Release/gdxcclib64.dll .
    - cp apifiles/*.h apifiles/*.c apifiles/*.cpp .
#    - GITHUB_TOKEN=${GITHUB_TOKEN} github-release -v release -u GAMS-dev -r gdx -t example-tag -d "some text." -n "Example release"
    - |
      for fn in libgdxcclib64.so gdxcclib64.dll libgdxcclib64.dylib gclgms.h gcmutex.h gdxcc.h gdxcc.c gdxcclib.cpp
      do
        GITHUB_TOKEN=${GITHUB_TOKEN} github-release -v upload -R -u GAMS-dev -r gdx -t example-tag -n $fn -f $fn
      done
