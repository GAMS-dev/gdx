stages:
  - fetch-scripts
  - install-gams
  - build
  - test
  - docs

variables:
  MACHINES_CONTAINER_REG:
    value: registry.gams.com/devel/machines
    description: "URL to the container registry of the machines repository"
  PF_CUSTOM_BRANCH:
    value: "master"
    description: "Name of custom branch or 0 if published distribution with version as specified should be taken"
  PF_BUILDS_WWW_PATH:
    value: $BUILDS_WWW_PATH
    description: "URL path prefix for builds server"
  PF_BUILDS_SSH_PORT:
    value: $BUILDS_SSH_PORT
    description: "Port used for SSH connection to builds server"
  PF_BUILDS_SSH_SERVER:
    value: $BUILDS_SSH_SERVER
    description: "URL of the build server"
  PF_BUILDS_SSH_USER:
    value: $BUILDS_SSH_USER
    description: "Username used for SSH connection to builds server"

# also fetches zlib since CMake-build of doesn't automatigically gets its like the devel/products Makefile
fetch-ci-scripts:
  stage: fetch-scripts
  when: always
  tags: [linux]
  dependencies: []
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [ "" ]
  script:
    - git clone -b no-artifacts https://gitlab-ci-token:${CI_JOB_TOKEN}@git.gams.com/devel/ciscripts.git scripts-repo
    - cp -R scripts-repo/ci .
    - git clone https://github.com/madler/zlib zlib
  artifacts:
    name: ci-scripts
    expire_in: 2 hours
    paths: [ci/*,zlib/*]

install-gamsdist-leg:
  stage: install-gams
  when: on_success
  tags: [linux]
  needs: [fetch-ci-scripts]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - python3 ci/fetch_gams.py fetch_leg $PF_CUSTOM_BRANCH $SSH_KEY_PORTING
    - |
      chmod 777 linux_x64_64_sfx.exe || :
    - python3 ci/fetch_gams.py install $PF_CUSTOM_BRANCH

build-leg:
  stage: build
  when: on_success
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - cp /cache/gams-installs/$PF_CUSTOM_BRANCH/apifiles/C/api/gclgms.h src/
    - cp /cache/gams-installs/$PF_CUSTOM_BRANCH/apifiles/C/api/gdxcc.* src/
    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON CMakeLists.txt
    - cmake --build . 2>&1 | tee build_log.txt
    - python3 ci/report_for_log.py gcc build_log.txt warnings.xml
  needs: [fetch-ci-scripts,install-gamsdist-leg]
  artifacts:
    name: gdx-leg
    paths: [gdxtest]
    expire_in: 2 hours
    reports:
      junit: warnings.xml

#build-deg:
#  stage: build
#  when: on_success
#  tags: [macos]
#  script:
#    - mv src/tobedeleted/temporary_gclgms.h src/gclgms.h
#    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_COMPILER=clang++ CMakeLists.txt
#    - cmake --build . 2>&1 | tee build_log.txt
#    - python3 ci/report_for_log.py clang build_log.txt warnings.xml
#  needs: [fetch-ci-scripts]
#  artifacts:
#    name: gdx-deg
#    paths: [gdxtest]
#    expire_in: 2 hours
#    reports:
#      junit: warnings.xml
#
#build-dac:
#  stage: build
#  when: on_success
#  tags: [macos-arm64]
#  script:
#    - mv src/tobedeleted/temporary_gclgms.h src/gclgms.h
#    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CXX_COMPILER=clang++ CMakeLists.txt
#    - cmake --build . 2>&1 | tee build_log.txt
#    - python3 ci/report_for_log.py clang build_log.txt warnings.xml
#  needs: [fetch-ci-scripts]
#  artifacts:
#    name: gdx-dac
#    paths: [gdxtest]
#    expire_in: 2 hours
#    reports:
#      junit: warnings.xml
#
#build-wei:
#  stage: build
#  when: on_success
#  tags: [windows]
#  image:
#    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
#  script:
#    - mv src/tobedeleted/temporary_gclgms.h src/gclgms.h
#    - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON CMakeLists.txt
#    - cmake --build  . --config Release -- -m | Tee-Object -FilePath 'build_log.txt'
#    - python ci/report_for_log.py msvc build_log.txt warnings.xml
#  needs: [fetch-ci-scripts]
#  artifacts:
#    name: gdx-wei
#    paths: [Release]
#    expire_in: 2 hours
#    reports:
#      junit: warnings.xml

test-leg:
  stage: test
  when: on_success
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  needs: [build-leg]
  script:
    - ./gdxtest --reporters=junit --out=doctest_results_linux.xml
  artifacts:
    name: unittest-results-linux
    paths: [doctest_results_linux.xml]
    expire_in: 2 hours
    reports:
      junit: doctest_results_linux.xml

#test-deg:
#  stage: test
#  when: on_success
#  tags: [macos]
#  needs: [build-deg]
#  script:
#    - ./gdxtest --reporters=junit --out=doctest_results_deg.xml
#  artifacts:
#    name: unittest-results-deg
#    paths: [doctest_results_deg.xml]
#    reports:
#      junit: doctest_results_deg.xml
#
#test-dac:
#  stage: test
#  when: on_success
#  tags: [macos-arm64]
#  needs: [build-dac]
#  script:
#    - ./gdxtest --reporters=junit --out=doctest_results_dac.xml
#  artifacts:
#    name: unittest-results-dac
#    paths: [doctest_results_dac.xml]
#    reports:
#      junit: doctest_results_dac.xml
#
#test-wei:
#  stage: test
#  when: on_success
#  tags: [windows]
#  image:
#    name: $MACHINES_CONTAINER_REG/wei/builder-full:latest
#  needs: [build-wei]
#  script:
#    - ./Release/gdxtest --reporters=junit --out=doctest_results_windows.xml
#  artifacts:
#    name: unittest-results-windows
#    paths: [doctest_results_windows.xml]
#    reports:
#      junit: doctest_results_windows.xml

doxygen-html:
  stage: docs
  when: always
  tags: [linux]
  image:
    name: $MACHINES_CONTAINER_REG/leg/builder-full:latest
    entrypoint: [""]
  script:
    - doxygen
  artifacts:
    name: doxygen-html-docs
    paths: [docs/html]
    expire_in: 1 day
